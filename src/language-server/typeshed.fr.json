{
  "files": {
    "/typeshed/stdlib/VERSIONS": "# The structure of this file is as follows:\n# - Blank lines and comments starting with `#` are ignored.\n# - Lines contain the name of a module, followed by a colon,\n#   a space, and a version range (for example: `symbol: 2.7-3.9`).\n#\n# Version ranges may be of the form \"X.Y-A.B\" or \"X.Y-\". The\n# first form means that a module was introduced in version X.Y and last\n# available in version A.B. The second form means that the module was\n# introduced in version X.Y and is still available in the latest\n# version of Python.\n#\n# If a submodule is not listed separately, it has the same lifetime as\n# its parent module.\n#\n# Python versions before 2.7 are ignored, so any module that was already\n# present in 2.7 will have \"2.7\" as its minimum version. Version ranges\n# for unsupported versions of Python 3 (currently 3.5 and lower) are\n# generally accurate but we do not guarantee their correctness.\n\nantigravity: 3.0-\narray: 3.0-\naudio: 3.0-\nbuiltins: 3.0-\nerrno: 3.0-\ngc: 3.0-\nlove: 3.0-\nmachine: 3.0-\nmath: 3.0-\nmicrobit: 3.0-\nmicropython: 3.0-\nmusic: 3.0-\nneopixel: 3.0-\nos: 3.0-\nradio: 3.0-\nrandom: 3.0-\nspeech: 3.0-\nstruct: 3.0-\nsys: 3.0-\nthis: 3.0-\ntime: 3.0-\ntyping_extensions: 3.0-\ntyping: 3.0-\nuarray: 3.0-\nucollections: 3.0-\nuerrno: 3.0-\nuos: 3.0-\nurandom: 3.0-\nustruct: 3.0-\nusys: 3.0-\nutime: 3.0-",
    "/typeshed/stdlib/abc.pyi": "from _typeshed import SupportsWrite\nfrom typing import Any, Callable, Tuple, Type, TypeVar\n_T = TypeVar('_T')\n_FuncT = TypeVar('_FuncT', bound=Callable[..., Any])\n\nclass ABCMeta(type):\n    __abstractmethods__: set[str]\n\n    def __init__(self, name: str, bases: Tuple[type, ...], namespace: dict[str, Any]) -> None:\n        ...\n\n    def __instancecheck__(cls: ABCMeta, instance: Any) -> Any:\n        ...\n\n    def __subclasscheck__(cls: ABCMeta, subclass: Any) -> Any:\n        ...\n\n    def _dump_registry(cls: ABCMeta, file: SupportsWrite[str] | None=...) -> None:\n        ...\n\n    def register(cls: ABCMeta, subclass: Type[_T]) -> Type[_T]:\n        ...\n\ndef abstractmethod(funcobj: _FuncT) -> _FuncT:\n    ...\n\nclass abstractproperty(property):\n    ...\n\ndef abstractstaticmethod(callable: _FuncT) -> _FuncT:\n    ...\n\ndef abstractclassmethod(callable: _FuncT) -> _FuncT:\n    ...\n\nclass ABC(metaclass=ABCMeta):\n    ...\n\ndef get_cache_token() -> object:\n    ...",
    "/typeshed/stdlib/antigravity.pyi": "",
    "/typeshed/stdlib/array.pyi": "from typing import Generic, Iterable, MutableSequence, TypeVar, Union, overload\nfrom typing_extensions import Literal\n_IntTypeCode = Literal['b', 'B', 'h', 'H', 'i', 'I', 'l', 'L', 'q', 'Q']\n_FloatTypeCode = Literal['f', 'd']\n_TypeCode = Union[_IntTypeCode, _FloatTypeCode]\n_T = TypeVar('_T', int, float)\n\nclass array(MutableSequence[_T], Generic[_T]):\n\n    @overload\n    def __init__(self: array[int], typecode: _IntTypeCode, __initializer: Union[bytes, Iterable[_T]]=...) -> None:\n        ...\n\n    @overload\n    def __init__(self: array[float], typecode: _FloatTypeCode, __initializer: Union[bytes, Iterable[_T]]=...) -> None:\n        ...\n\n    @overload\n    def __init__(self, typecode: str, __initializer: Union[bytes, Iterable[_T]]=...) -> None:\n        ...\n\n    def append(self, __v: _T) -> None:\n        ...\n\n    def decode(self) -> str:\n        ...\n\n    def extend(self, __bb: Iterable[_T]) -> None:\n        ...\n\n    def __len__(self) -> int:\n        ...\n\n    @overload\n    def __getitem__(self, i: int) -> _T:\n        ...\n\n    @overload\n    def __getitem__(self, s: slice) -> array[_T]:\n        ...\n\n    @overload\n    def __setitem__(self, i: int, o: _T) -> None:\n        ...\n\n    @overload\n    def __setitem__(self, s: slice, o: array[_T]) -> None:\n        ...\n\n    def __add__(self, x: array[_T]) -> array[_T]:\n        ...\n\n    def __iadd__(self, x: array[_T]) -> array[_T]:\n        ...\nArrayType = array",
    "/typeshed/stdlib/builtins.pyi": "import sys\nimport types\nfrom _typeshed import OpenBinaryMode, OpenTextMode, ReadableBuffer, Self, StrOrBytesPath, SupportsDivMod, SupportsKeysAndGetItem, SupportsLenAndGetItem, SupportsLessThan, SupportsLessThanT, SupportsRDivMod, SupportsWrite\nfrom types import CodeType, TracebackType\nfrom typing import IO, AbstractSet, Any, AsyncIterable, AsyncIterator, BinaryIO, ByteString, Callable, FrozenSet, Generic, ItemsView, Iterable, Iterator, KeysView, Mapping, MutableMapping, MutableSequence, MutableSet, NoReturn, Protocol, Reversible, Sequence, Set, Sized, SupportsAbs, SupportsBytes, SupportsComplex, SupportsFloat, SupportsInt, SupportsRound, TextIO, Tuple, Type, TypeVar, Union, ValuesView, overload\nfrom typing_extensions import Literal, SupportsIndex, final\nif sys.version_info >= (3, 9):\n    from types import GenericAlias\n\nclass _SupportsTrunc(Protocol):\n\n    def __trunc__(self) -> int:\n        ...\n_T = TypeVar('_T')\n_T_co = TypeVar('_T_co', covariant=True)\n_T_contra = TypeVar('_T_contra', contravariant=True)\n_KT = TypeVar('_KT')\n_VT = TypeVar('_VT')\n_S = TypeVar('_S')\n_T1 = TypeVar('_T1')\n_T2 = TypeVar('_T2')\n_T3 = TypeVar('_T3')\n_T4 = TypeVar('_T4')\n_T5 = TypeVar('_T5')\n_TT = TypeVar('_TT', bound='type')\n_TBE = TypeVar('_TBE', bound='BaseException')\n\nclass object:\n    __doc__: str | None\n    __dict__: dict[str, Any]\n    __slots__: str | Iterable[str]\n    __module__: str\n    __annotations__: dict[str, Any]\n\n    @property\n    def __class__(self: _T) -> Type[_T]:\n        ...\n\n    @__class__.setter\n    def __class__(self, __type: Type[object]) -> None:\n        ...\n\n    def __init__(self) -> None:\n        ...\n\n    def __new__(cls: Type[_T]) -> _T:\n        ...\n\n    def __setattr__(self, name: str, value: Any) -> None:\n        ...\n\n    def __eq__(self, o: object) -> bool:\n        ...\n\n    def __ne__(self, o: object) -> bool:\n        ...\n\n    def __str__(self) -> str:\n        ...\n\n    def __repr__(self) -> str:\n        ...\n\n    def __hash__(self) -> int:\n        ...\n\n    def __format__(self, format_spec: str) -> str:\n        ...\n\n    def __getattribute__(self, name: str) -> Any:\n        ...\n\n    def __delattr__(self, name: str) -> None:\n        ...\n\n    def __sizeof__(self) -> int:\n        ...\n\n    def __reduce__(self) -> str | Tuple[Any, ...]:\n        ...\n    if sys.version_info >= (3, 8):\n\n        def __reduce_ex__(self, protocol: SupportsIndex) -> str | Tuple[Any, ...]:\n            ...\n    else:\n\n        def __reduce_ex__(self, protocol: int) -> str | Tuple[Any, ...]:\n            ...\n\n    def __dir__(self) -> Iterable[str]:\n        ...\n\n    def __init_subclass__(cls) -> None:\n        ...\n\nclass staticmethod(object):\n    __func__: Callable[..., Any]\n    __isabstractmethod__: bool\n\n    def __init__(self, f: Callable[..., Any]) -> None:\n        ...\n\n    def __new__(cls: Type[_T], *args: Any, **kwargs: Any) -> _T:\n        ...\n\n    def __get__(self, obj: _T, type: Type[_T] | None=...) -> Callable[..., Any]:\n        ...\n\nclass classmethod(object):\n    __func__: Callable[..., Any]\n    __isabstractmethod__: bool\n\n    def __init__(self, f: Callable[..., Any]) -> None:\n        ...\n\n    def __new__(cls: Type[_T], *args: Any, **kwargs: Any) -> _T:\n        ...\n\n    def __get__(self, obj: _T, type: Type[_T] | None=...) -> Callable[..., Any]:\n        ...\n\nclass type(object):\n    __base__: type\n    __bases__: Tuple[type, ...]\n    __basicsize__: int\n    __dict__: dict[str, Any]\n    __dictoffset__: int\n    __flags__: int\n    __itemsize__: int\n    __module__: str\n    __name__: str\n    __qualname__: str\n    __text_signature__: str | None\n    __weakrefoffset__: int\n\n    @overload\n    def __init__(self, o: object) -> None:\n        ...\n\n    @overload\n    def __init__(self, name: str, bases: Tuple[type, ...], dict: dict[str, Any], **kwds: Any) -> None:\n        ...\n\n    @overload\n    def __new__(cls, o: object) -> type:\n        ...\n\n    @overload\n    def __new__(cls: Type[_TT], name: str, bases: Tuple[type, ...], namespace: dict[str, Any], **kwds: Any) -> _TT:\n        ...\n\n    def __call__(self, *args: Any, **kwds: Any) -> Any:\n        ...\n\n    def __subclasses__(self: _TT) -> list[_TT]:\n        ...\n\n    def __instancecheck__(self, instance: Any) -> bool:\n        ...\n\n    def __subclasscheck__(self, subclass: type) -> bool:\n        ...\n\n    @classmethod\n    def __prepare__(metacls, __name: str, __bases: Tuple[type, ...], **kwds: Any) -> Mapping[str, Any]:\n        ...\n    if sys.version_info >= (3, 10):\n\n        def __or__(self, t: Any) -> types.UnionType:\n            ...\n\n        def __ror__(self, t: Any) -> types.UnionType:\n            ...\n\nclass super(object):\n\n    @overload\n    def __init__(self, t: Any, obj: Any) -> None:\n        ...\n\n    @overload\n    def __init__(self, t: Any) -> None:\n        ...\n\n    @overload\n    def __init__(self) -> None:\n        ...\n\nclass int:\n\n    @overload\n    def __new__(cls: Type[_T], x: str | bytes | SupportsInt | SupportsIndex | _SupportsTrunc=...) -> _T:\n        ...\n\n    @overload\n    def __new__(cls: Type[_T], x: str | bytes | bytearray, base: SupportsIndex) -> _T:\n        ...\n\n    def to_bytes(self, length: SupportsIndex, byteorder: Literal['little', 'big'], *, signed: bool=...) -> bytes:\n        ...\n\n    @classmethod\n    def from_bytes(cls, bytes: Iterable[SupportsIndex] | SupportsBytes, byteorder: Literal['little', 'big'], *, signed: bool=...) -> int:\n        ...\n\n    def __add__(self, x: int) -> int:\n        ...\n\n    def __sub__(self, x: int) -> int:\n        ...\n\n    def __mul__(self, x: int) -> int:\n        ...\n\n    def __floordiv__(self, x: int) -> int:\n        ...\n\n    def __truediv__(self, x: int) -> float:\n        ...\n\n    def __mod__(self, x: int) -> int:\n        ...\n\n    def __divmod__(self, x: int) -> Tuple[int, int]:\n        ...\n\n    def __radd__(self, x: int) -> int:\n        ...\n\n    def __rsub__(self, x: int) -> int:\n        ...\n\n    def __rmul__(self, x: int) -> int:\n        ...\n\n    def __rfloordiv__(self, x: int) -> int:\n        ...\n\n    def __rtruediv__(self, x: int) -> float:\n        ...\n\n    def __rmod__(self, x: int) -> int:\n        ...\n\n    def __rdivmod__(self, x: int) -> Tuple[int, int]:\n        ...\n\n    @overload\n    def __pow__(self, __x: Literal[2], __modulo: int | None=...) -> int:\n        ...\n\n    @overload\n    def __pow__(self, __x: int, __modulo: int | None=...) -> Any:\n        ...\n\n    def __rpow__(self, x: int, mod: int | None=...) -> Any:\n        ...\n\n    def __and__(self, n: int) -> int:\n        ...\n\n    def __or__(self, n: int) -> int:\n        ...\n\n    def __xor__(self, n: int) -> int:\n        ...\n\n    def __lshift__(self, n: int) -> int:\n        ...\n\n    def __rshift__(self, n: int) -> int:\n        ...\n\n    def __rand__(self, n: int) -> int:\n        ...\n\n    def __ror__(self, n: int) -> int:\n        ...\n\n    def __rxor__(self, n: int) -> int:\n        ...\n\n    def __rlshift__(self, n: int) -> int:\n        ...\n\n    def __rrshift__(self, n: int) -> int:\n        ...\n\n    def __neg__(self) -> int:\n        ...\n\n    def __pos__(self) -> int:\n        ...\n\n    def __invert__(self) -> int:\n        ...\n\n    def __trunc__(self) -> int:\n        ...\n\n    def __ceil__(self) -> int:\n        ...\n\n    def __floor__(self) -> int:\n        ...\n\n    def __round__(self, ndigits: SupportsIndex=...) -> int:\n        ...\n\n    def __getnewargs__(self) -> Tuple[int]:\n        ...\n\n    def __eq__(self, x: object) -> bool:\n        ...\n\n    def __ne__(self, x: object) -> bool:\n        ...\n\n    def __lt__(self, x: int) -> bool:\n        ...\n\n    def __le__(self, x: int) -> bool:\n        ...\n\n    def __gt__(self, x: int) -> bool:\n        ...\n\n    def __ge__(self, x: int) -> bool:\n        ...\n\n    def __str__(self) -> str:\n        ...\n\n    def __float__(self) -> float:\n        ...\n\n    def __int__(self) -> int:\n        ...\n\n    def __abs__(self) -> int:\n        ...\n\n    def __hash__(self) -> int:\n        ...\n\n    def __bool__(self) -> bool:\n        ...\n\n    def __index__(self) -> int:\n        ...\n\nclass float:\n\n    def __new__(cls: Type[_T], x: SupportsFloat | SupportsIndex | str | bytes | bytearray=...) -> _T:\n        ...\n\n    def __add__(self, x: float) -> float:\n        ...\n\n    def __sub__(self, x: float) -> float:\n        ...\n\n    def __mul__(self, x: float) -> float:\n        ...\n\n    def __floordiv__(self, x: float) -> float:\n        ...\n\n    def __truediv__(self, x: float) -> float:\n        ...\n\n    def __mod__(self, x: float) -> float:\n        ...\n\n    def __divmod__(self, x: float) -> Tuple[float, float]:\n        ...\n\n    def __pow__(self, x: float, mod: None=...) -> float:\n        ...\n\n    def __radd__(self, x: float) -> float:\n        ...\n\n    def __rsub__(self, x: float) -> float:\n        ...\n\n    def __rmul__(self, x: float) -> float:\n        ...\n\n    def __rfloordiv__(self, x: float) -> float:\n        ...\n\n    def __rtruediv__(self, x: float) -> float:\n        ...\n\n    def __rmod__(self, x: float) -> float:\n        ...\n\n    def __rdivmod__(self, x: float) -> Tuple[float, float]:\n        ...\n\n    def __rpow__(self, x: float, mod: None=...) -> float:\n        ...\n\n    def __getnewargs__(self) -> Tuple[float]:\n        ...\n\n    def __trunc__(self) -> int:\n        ...\n    if sys.version_info >= (3, 9):\n\n        def __ceil__(self) -> int:\n            ...\n\n        def __floor__(self) -> int:\n            ...\n\n    @overload\n    def __round__(self, ndigits: None=...) -> int:\n        ...\n\n    @overload\n    def __round__(self, ndigits: SupportsIndex) -> float:\n        ...\n\n    def __eq__(self, x: object) -> bool:\n        ...\n\n    def __ne__(self, x: object) -> bool:\n        ...\n\n    def __lt__(self, x: float) -> bool:\n        ...\n\n    def __le__(self, x: float) -> bool:\n        ...\n\n    def __gt__(self, x: float) -> bool:\n        ...\n\n    def __ge__(self, x: float) -> bool:\n        ...\n\n    def __neg__(self) -> float:\n        ...\n\n    def __pos__(self) -> float:\n        ...\n\n    def __str__(self) -> str:\n        ...\n\n    def __int__(self) -> int:\n        ...\n\n    def __float__(self) -> float:\n        ...\n\n    def __abs__(self) -> float:\n        ...\n\n    def __hash__(self) -> int:\n        ...\n\n    def __bool__(self) -> bool:\n        ...\n\nclass complex:\n\n    @overload\n    def __new__(cls: Type[_T], real: float=..., imag: float=...) -> _T:\n        ...\n\n    @overload\n    def __new__(cls: Type[_T], real: str | SupportsComplex | SupportsIndex | complex) -> _T:\n        ...\n\n    @property\n    def real(self) -> float:\n        ...\n\n    @property\n    def imag(self) -> float:\n        ...\n\n    def __add__(self, x: complex) -> complex:\n        ...\n\n    def __sub__(self, x: complex) -> complex:\n        ...\n\n    def __mul__(self, x: complex) -> complex:\n        ...\n\n    def __pow__(self, x: complex, mod: None=...) -> complex:\n        ...\n\n    def __truediv__(self, x: complex) -> complex:\n        ...\n\n    def __radd__(self, x: complex) -> complex:\n        ...\n\n    def __rsub__(self, x: complex) -> complex:\n        ...\n\n    def __rmul__(self, x: complex) -> complex:\n        ...\n\n    def __rpow__(self, x: complex, mod: None=...) -> complex:\n        ...\n\n    def __rtruediv__(self, x: complex) -> complex:\n        ...\n\n    def __eq__(self, x: object) -> bool:\n        ...\n\n    def __ne__(self, x: object) -> bool:\n        ...\n\n    def __neg__(self) -> complex:\n        ...\n\n    def __pos__(self) -> complex:\n        ...\n\n    def __str__(self) -> str:\n        ...\n\n    def __abs__(self) -> float:\n        ...\n\n    def __hash__(self) -> int:\n        ...\n\n    def __bool__(self) -> bool:\n        ...\n\nclass str(Sequence[str]):\n\n    @overload\n    def __new__(cls: Type[_T], o: object=...) -> _T:\n        ...\n\n    @overload\n    def __new__(cls: Type[_T], o: bytes, encoding: str=..., errors: str=...) -> _T:\n        ...\n\n    def count(self, x: str, __start: SupportsIndex | None=..., __end: SupportsIndex | None=...) -> int:\n        ...\n\n    def encode(self, encoding: str=..., errors: str=...) -> bytes:\n        ...\n\n    def endswith(self, __suffix: str | Tuple[str, ...], __start: SupportsIndex | None=..., __end: SupportsIndex | None=...) -> bool:\n        ...\n\n    def find(self, __sub: str, __start: SupportsIndex | None=..., __end: SupportsIndex | None=...) -> int:\n        ...\n\n    def format(self, *args: object, **kwargs: object) -> str:\n        ...\n\n    def index(self, __sub: str, __start: SupportsIndex | None=..., __end: SupportsIndex | None=...) -> int:\n        ...\n\n    def isalpha(self) -> bool:\n        ...\n\n    def isdigit(self) -> bool:\n        ...\n\n    def islower(self) -> bool:\n        ...\n\n    def isspace(self) -> bool:\n        ...\n\n    def isupper(self) -> bool:\n        ...\n\n    def join(self, __iterable: Iterable[str]) -> str:\n        ...\n\n    def lower(self) -> str:\n        ...\n\n    def lstrip(self, __chars: str | None=...) -> str:\n        ...\n\n    def replace(self, __old: str, __new: str, __count: SupportsIndex=...) -> str:\n        ...\n\n    def rfind(self, __sub: str, __start: SupportsIndex | None=..., __end: SupportsIndex | None=...) -> int:\n        ...\n\n    def rindex(self, __sub: str, __start: SupportsIndex | None=..., __end: SupportsIndex | None=...) -> int:\n        ...\n\n    def rsplit(self, sep: str | None=..., maxsplit: SupportsIndex=...) -> list[str]:\n        ...\n\n    def rstrip(self, __chars: str | None=...) -> str:\n        ...\n\n    def split(self, sep: str | None=..., maxsplit: SupportsIndex=...) -> list[str]:\n        ...\n\n    def startswith(self, __prefix: str | Tuple[str, ...], __start: SupportsIndex | None=..., __end: SupportsIndex | None=...) -> bool:\n        ...\n\n    def strip(self, __chars: str | None=...) -> str:\n        ...\n\n    def upper(self) -> str:\n        ...\n\n    def __add__(self, s: str) -> str:\n        ...\n\n    def __contains__(self, o: str) -> bool:\n        ...\n\n    def __eq__(self, x: object) -> bool:\n        ...\n\n    def __ge__(self, x: str) -> bool:\n        ...\n\n    def __getitem__(self, i: int | slice) -> str:\n        ...\n\n    def __gt__(self, x: str) -> bool:\n        ...\n\n    def __hash__(self) -> int:\n        ...\n\n    def __iter__(self) -> Iterator[str]:\n        ...\n\n    def __le__(self, x: str) -> bool:\n        ...\n\n    def __len__(self) -> int:\n        ...\n\n    def __lt__(self, x: str) -> bool:\n        ...\n\n    def __mod__(self, x: Any) -> str:\n        ...\n\n    def __mul__(self, n: SupportsIndex) -> str:\n        ...\n\n    def __ne__(self, x: object) -> bool:\n        ...\n\n    def __repr__(self) -> str:\n        ...\n\n    def __rmul__(self, n: SupportsIndex) -> str:\n        ...\n\n    def __str__(self) -> str:\n        ...\n\n    def __getnewargs__(self) -> Tuple[str]:\n        ...\n\nclass bytes(ByteString):\n\n    @overload\n    def __new__(cls: Type[_T], ints: Iterable[SupportsIndex]) -> _T:\n        ...\n\n    @overload\n    def __new__(cls: Type[_T], string: str, encoding: str, errors: str=...) -> _T:\n        ...\n\n    @overload\n    def __new__(cls: Type[_T], length: SupportsIndex) -> _T:\n        ...\n\n    @overload\n    def __new__(cls: Type[_T]) -> _T:\n        ...\n\n    @overload\n    def __new__(cls: Type[_T], o: SupportsBytes) -> _T:\n        ...\n\n    def count(self, __sub: bytes | SupportsIndex, __start: SupportsIndex | None=..., __end: SupportsIndex | None=...) -> int:\n        ...\n\n    def decode(self, encoding: str=..., errors: str=...) -> str:\n        ...\n\n    def endswith(self, __suffix: bytes | Tuple[bytes, ...], __start: SupportsIndex | None=..., __end: SupportsIndex | None=...) -> bool:\n        ...\n\n    def find(self, __sub: bytes | SupportsIndex, __start: SupportsIndex | None=..., __end: SupportsIndex | None=...) -> int:\n        ...\n\n    def index(self, __sub: bytes | SupportsIndex, __start: SupportsIndex | None=..., __end: SupportsIndex | None=...) -> int:\n        ...\n\n    def isalpha(self) -> bool:\n        ...\n\n    def isdigit(self) -> bool:\n        ...\n\n    def islower(self) -> bool:\n        ...\n\n    def isspace(self) -> bool:\n        ...\n\n    def isupper(self) -> bool:\n        ...\n\n    def join(self, __iterable_of_bytes: Iterable[ByteString | memoryview]) -> bytes:\n        ...\n\n    def lower(self) -> bytes:\n        ...\n\n    def lstrip(self, __bytes: bytes | None=...) -> bytes:\n        ...\n\n    def replace(self, __old: bytes, __new: bytes, __count: SupportsIndex=...) -> bytes:\n        ...\n\n    def rfind(self, __sub: bytes | SupportsIndex, __start: SupportsIndex | None=..., __end: SupportsIndex | None=...) -> int:\n        ...\n\n    def rindex(self, __sub: bytes | SupportsIndex, __start: SupportsIndex | None=..., __end: SupportsIndex | None=...) -> int:\n        ...\n\n    def rsplit(self, sep: bytes | None=..., maxsplit: SupportsIndex=...) -> list[bytes]:\n        ...\n\n    def rstrip(self, __bytes: bytes | None=...) -> bytes:\n        ...\n\n    def split(self, sep: bytes | None=..., maxsplit: SupportsIndex=...) -> list[bytes]:\n        ...\n\n    def startswith(self, __prefix: bytes | Tuple[bytes, ...], __start: SupportsIndex | None=..., __end: SupportsIndex | None=...) -> bool:\n        ...\n\n    def strip(self, __bytes: bytes | None=...) -> bytes:\n        ...\n\n    def upper(self) -> bytes:\n        ...\n\n    def __len__(self) -> int:\n        ...\n\n    def __iter__(self) -> Iterator[int]:\n        ...\n\n    def __str__(self) -> str:\n        ...\n\n    def __repr__(self) -> str:\n        ...\n\n    def __hash__(self) -> int:\n        ...\n\n    @overload\n    def __getitem__(self, i: SupportsIndex) -> int:\n        ...\n\n    @overload\n    def __getitem__(self, s: slice) -> bytes:\n        ...\n\n    def __add__(self, s: bytes) -> bytes:\n        ...\n\n    def __mul__(self, n: SupportsIndex) -> bytes:\n        ...\n\n    def __rmul__(self, n: SupportsIndex) -> bytes:\n        ...\n\n    def __mod__(self, value: Any) -> bytes:\n        ...\n\n    def __contains__(self, o: SupportsIndex | bytes) -> bool:\n        ...\n\n    def __eq__(self, x: object) -> bool:\n        ...\n\n    def __ne__(self, x: object) -> bool:\n        ...\n\n    def __lt__(self, x: bytes) -> bool:\n        ...\n\n    def __le__(self, x: bytes) -> bool:\n        ...\n\n    def __gt__(self, x: bytes) -> bool:\n        ...\n\n    def __ge__(self, x: bytes) -> bool:\n        ...\n\n    def __getnewargs__(self) -> Tuple[bytes]:\n        ...\n\nclass bytearray:\n\n    @overload\n    def __init__(self) -> None:\n        ...\n\n    @overload\n    def __init__(self, ints: Iterable[SupportsIndex]) -> None:\n        ...\n\n    @overload\n    def __init__(self, string: str, encoding: str, errors: str=...) -> None:\n        ...\n\n    @overload\n    def __init__(self, length: SupportsIndex) -> None:\n        ...\n\n    def append(self, __item: SupportsIndex) -> None:\n        ...\n\n    def decode(self, encoding: str=..., errors: str=...) -> str:\n        ...\n\n    def extend(self, __iterable_of_ints: Iterable[SupportsIndex]) -> None:\n        ...\n\n    def __len__(self) -> int:\n        ...\n\n    def __iter__(self) -> Iterator[int]:\n        ...\n\n    def __str__(self) -> str:\n        ...\n\n    def __repr__(self) -> str:\n        ...\n    __hash__: None\n\n    @overload\n    def __getitem__(self, i: SupportsIndex) -> int:\n        ...\n\n    @overload\n    def __getitem__(self, s: slice) -> bytearray:\n        ...\n\n    @overload\n    def __setitem__(self, i: SupportsIndex, x: SupportsIndex) -> None:\n        ...\n\n    @overload\n    def __setitem__(self, s: slice, x: Iterable[SupportsIndex] | bytes) -> None:\n        ...\n\n    def __delitem__(self, i: SupportsIndex | slice) -> None:\n        ...\n\n    def __add__(self, s: bytes) -> bytearray:\n        ...\n\n    def __iadd__(self, s: Iterable[int]) -> bytearray:\n        ...\n\n    def __mul__(self, n: SupportsIndex) -> bytearray:\n        ...\n\n    def __rmul__(self, n: SupportsIndex) -> bytearray:\n        ...\n\n    def __imul__(self, n: SupportsIndex) -> bytearray:\n        ...\n\n    def __mod__(self, value: Any) -> bytes:\n        ...\n\n    def __contains__(self, o: SupportsIndex | bytes) -> bool:\n        ...\n\n    def __eq__(self, x: object) -> bool:\n        ...\n\n    def __ne__(self, x: object) -> bool:\n        ...\n\n    def __lt__(self, x: bytes) -> bool:\n        ...\n\n    def __le__(self, x: bytes) -> bool:\n        ...\n\n    def __gt__(self, x: bytes) -> bool:\n        ...\n\n    def __ge__(self, x: bytes) -> bool:\n        ...\n\nclass memoryview(Sized, Sequence[int]):\n\n    def __init__(self, obj: ReadableBuffer) -> None:\n        ...\n\n    @overload\n    def __getitem__(self, i: SupportsIndex) -> int:\n        ...\n\n    @overload\n    def __getitem__(self, s: slice) -> memoryview:\n        ...\n\n    def __contains__(self, x: object) -> bool:\n        ...\n\n    def __iter__(self) -> Iterator[int]:\n        ...\n\n    def __len__(self) -> int:\n        ...\n\n    @overload\n    def __setitem__(self, s: slice, o: bytes) -> None:\n        ...\n\n    @overload\n    def __setitem__(self, i: SupportsIndex, o: SupportsIndex) -> None:\n        ...\n\n@final\nclass bool(int):\n\n    def __new__(cls: Type[_T], __o: object=...) -> _T:\n        ...\n\n    @overload\n    def __and__(self, x: bool) -> bool:\n        ...\n\n    @overload\n    def __and__(self, x: int) -> int:\n        ...\n\n    @overload\n    def __or__(self, x: bool) -> bool:\n        ...\n\n    @overload\n    def __or__(self, x: int) -> int:\n        ...\n\n    @overload\n    def __xor__(self, x: bool) -> bool:\n        ...\n\n    @overload\n    def __xor__(self, x: int) -> int:\n        ...\n\n    @overload\n    def __rand__(self, x: bool) -> bool:\n        ...\n\n    @overload\n    def __rand__(self, x: int) -> int:\n        ...\n\n    @overload\n    def __ror__(self, x: bool) -> bool:\n        ...\n\n    @overload\n    def __ror__(self, x: int) -> int:\n        ...\n\n    @overload\n    def __rxor__(self, x: bool) -> bool:\n        ...\n\n    @overload\n    def __rxor__(self, x: int) -> int:\n        ...\n\n    def __getnewargs__(self) -> Tuple[int]:\n        ...\n\nclass slice(object):\n    start: Any\n    step: Any\n    stop: Any\n    __hash__: None\n\n    def indices(self, len: SupportsIndex) -> Tuple[int, int, int]:\n        ...\n\nclass tuple(Sequence[_T_co], Generic[_T_co]):\n\n    def __new__(cls: Type[_T], iterable: Iterable[_T_co]=...) -> _T:\n        ...\n\n    def __len__(self) -> int:\n        ...\n\n    def __contains__(self, x: object) -> bool:\n        ...\n\n    @overload\n    def __getitem__(self, x: int) -> _T_co:\n        ...\n\n    @overload\n    def __getitem__(self, x: slice) -> Tuple[_T_co, ...]:\n        ...\n\n    def __iter__(self) -> Iterator[_T_co]:\n        ...\n\n    def __lt__(self, x: Tuple[_T_co, ...]) -> bool:\n        ...\n\n    def __le__(self, x: Tuple[_T_co, ...]) -> bool:\n        ...\n\n    def __gt__(self, x: Tuple[_T_co, ...]) -> bool:\n        ...\n\n    def __ge__(self, x: Tuple[_T_co, ...]) -> bool:\n        ...\n\n    @overload\n    def __add__(self, x: Tuple[_T_co, ...]) -> Tuple[_T_co, ...]:\n        ...\n\n    @overload\n    def __add__(self, x: Tuple[_T, ...]) -> Tuple[_T_co | _T, ...]:\n        ...\n\n    def __mul__(self, n: SupportsIndex) -> Tuple[_T_co, ...]:\n        ...\n\n    def __rmul__(self, n: SupportsIndex) -> Tuple[_T_co, ...]:\n        ...\n\n    def count(self, __value: Any) -> int:\n        ...\n\n    def index(self, __value: Any, __start: SupportsIndex=..., __stop: SupportsIndex=...) -> int:\n        ...\n\nclass function:\n    __name__: str\n    __module__: str\n    __code__: CodeType\n    __qualname__: str\n    __annotations__: dict[str, Any]\n\nclass list(MutableSequence[_T], Generic[_T]):\n\n    @overload\n    def __init__(self) -> None:\n        ...\n\n    @overload\n    def __init__(self, iterable: Iterable[_T]) -> None:\n        ...\n\n    def clear(self) -> None:\n        ...\n\n    def copy(self) -> list[_T]:\n        ...\n\n    def append(self, __object: _T) -> None:\n        ...\n\n    def extend(self, __iterable: Iterable[_T]) -> None:\n        ...\n\n    def pop(self, __index: SupportsIndex=...) -> _T:\n        ...\n\n    def index(self, __value: _T, __start: SupportsIndex=..., __stop: SupportsIndex=...) -> int:\n        ...\n\n    def count(self, __value: _T) -> int:\n        ...\n\n    def insert(self, __index: SupportsIndex, __object: _T) -> None:\n        ...\n\n    def remove(self, __value: _T) -> None:\n        ...\n\n    def reverse(self) -> None:\n        ...\n\n    @overload\n    def sort(self: list[SupportsLessThanT], *, key: None=..., reverse: bool=...) -> None:\n        ...\n\n    @overload\n    def sort(self, *, key: Callable[[_T], SupportsLessThan], reverse: bool=...) -> None:\n        ...\n\n    def __len__(self) -> int:\n        ...\n\n    def __iter__(self) -> Iterator[_T]:\n        ...\n\n    def __str__(self) -> str:\n        ...\n    __hash__: None\n\n    @overload\n    def __getitem__(self, i: SupportsIndex) -> _T:\n        ...\n\n    @overload\n    def __getitem__(self, s: slice) -> list[_T]:\n        ...\n\n    @overload\n    def __setitem__(self, i: SupportsIndex, o: _T) -> None:\n        ...\n\n    @overload\n    def __setitem__(self, s: slice, o: Iterable[_T]) -> None:\n        ...\n\n    def __delitem__(self, i: SupportsIndex | slice) -> None:\n        ...\n\n    def __add__(self, x: list[_T]) -> list[_T]:\n        ...\n\n    def __iadd__(self: _S, x: Iterable[_T]) -> _S:\n        ...\n\n    def __mul__(self, n: SupportsIndex) -> list[_T]:\n        ...\n\n    def __rmul__(self, n: SupportsIndex) -> list[_T]:\n        ...\n\n    def __imul__(self: _S, n: SupportsIndex) -> _S:\n        ...\n\n    def __contains__(self, o: object) -> bool:\n        ...\n\n    def __reversed__(self) -> Iterator[_T]:\n        ...\n\n    def __gt__(self, x: list[_T]) -> bool:\n        ...\n\n    def __ge__(self, x: list[_T]) -> bool:\n        ...\n\n    def __lt__(self, x: list[_T]) -> bool:\n        ...\n\n    def __le__(self, x: list[_T]) -> bool:\n        ...\n    if sys.version_info >= (3, 9):\n\n        def __class_getitem__(cls, item: Any) -> GenericAlias:\n            ...\n\nclass dict(MutableMapping[_KT, _VT], Generic[_KT, _VT]):\n\n    @overload\n    def __init__(self: dict[_KT, _VT]) -> None:\n        ...\n\n    @overload\n    def __init__(self: dict[str, _VT], **kwargs: _VT) -> None:\n        ...\n\n    @overload\n    def __init__(self, map: SupportsKeysAndGetItem[_KT, _VT], **kwargs: _VT) -> None:\n        ...\n\n    @overload\n    def __init__(self, iterable: Iterable[Tuple[_KT, _VT]], **kwargs: _VT) -> None:\n        ...\n\n    def __new__(cls: Type[_T1], *args: Any, **kwargs: Any) -> _T1:\n        ...\n\n    def clear(self) -> None:\n        ...\n\n    def copy(self) -> dict[_KT, _VT]:\n        ...\n\n    def popitem(self) -> Tuple[_KT, _VT]:\n        ...\n\n    def setdefault(self, __key: _KT, __default: _VT=...) -> _VT:\n        ...\n\n    @overload\n    def update(self, __m: Mapping[_KT, _VT], **kwargs: _VT) -> None:\n        ...\n\n    @overload\n    def update(self, __m: Iterable[Tuple[_KT, _VT]], **kwargs: _VT) -> None:\n        ...\n\n    @overload\n    def update(self, **kwargs: _VT) -> None:\n        ...\n\n    def keys(self) -> KeysView[_KT]:\n        ...\n\n    def values(self) -> ValuesView[_VT]:\n        ...\n\n    def items(self) -> ItemsView[_KT, _VT]:\n        ...\n\n    @classmethod\n    @overload\n    def fromkeys(cls, __iterable: Iterable[_T], __value: None=...) -> dict[_T, Any | None]:\n        ...\n\n    @classmethod\n    @overload\n    def fromkeys(cls, __iterable: Iterable[_T], __value: _S) -> dict[_T, _S]:\n        ...\n\n    def __len__(self) -> int:\n        ...\n\n    def __getitem__(self, k: _KT) -> _VT:\n        ...\n\n    def __setitem__(self, k: _KT, v: _VT) -> None:\n        ...\n\n    def __delitem__(self, v: _KT) -> None:\n        ...\n\n    def __iter__(self) -> Iterator[_KT]:\n        ...\n    if sys.version_info >= (3, 8):\n\n        def __reversed__(self) -> Iterator[_KT]:\n            ...\n\n    def __str__(self) -> str:\n        ...\n    __hash__: None\n    if sys.version_info >= (3, 9):\n\n        def __class_getitem__(cls, item: Any) -> GenericAlias:\n            ...\n\n        def __or__(self, __value: Mapping[_T1, _T2]) -> dict[_KT | _T1, _VT | _T2]:\n            ...\n\n        def __ror__(self, __value: Mapping[_T1, _T2]) -> dict[_KT | _T1, _VT | _T2]:\n            ...\n\n        def __ior__(self, __value: Mapping[_KT, _VT]) -> dict[_KT, _VT]:\n            ...\n\nclass set(MutableSet[_T], Generic[_T]):\n\n    def __init__(self, iterable: Iterable[_T]=...) -> None:\n        ...\n\n    def add(self, element: _T) -> None:\n        ...\n\n    def clear(self) -> None:\n        ...\n\n    def copy(self) -> Set[_T]:\n        ...\n\n    def difference(self, *s: Iterable[Any]) -> Set[_T]:\n        ...\n\n    def difference_update(self, *s: Iterable[Any]) -> None:\n        ...\n\n    def discard(self, element: _T) -> None:\n        ...\n\n    def intersection(self, *s: Iterable[Any]) -> Set[_T]:\n        ...\n\n    def intersection_update(self, *s: Iterable[Any]) -> None:\n        ...\n\n    def isdisjoint(self, s: Iterable[Any]) -> bool:\n        ...\n\n    def issubset(self, s: Iterable[Any]) -> bool:\n        ...\n\n    def issuperset(self, s: Iterable[Any]) -> bool:\n        ...\n\n    def pop(self) -> _T:\n        ...\n\n    def remove(self, element: _T) -> None:\n        ...\n\n    def symmetric_difference(self, s: Iterable[_T]) -> Set[_T]:\n        ...\n\n    def symmetric_difference_update(self, s: Iterable[_T]) -> None:\n        ...\n\n    def union(self, *s: Iterable[_T]) -> Set[_T]:\n        ...\n\n    def update(self, *s: Iterable[_T]) -> None:\n        ...\n\n    def __len__(self) -> int:\n        ...\n\n    def __contains__(self, o: object) -> bool:\n        ...\n\n    def __iter__(self) -> Iterator[_T]:\n        ...\n\n    def __str__(self) -> str:\n        ...\n\n    def __and__(self, s: AbstractSet[object]) -> Set[_T]:\n        ...\n\n    def __iand__(self, s: AbstractSet[object]) -> Set[_T]:\n        ...\n\n    def __or__(self, s: AbstractSet[_S]) -> Set[_T | _S]:\n        ...\n\n    def __ior__(self, s: AbstractSet[_S]) -> Set[_T | _S]:\n        ...\n\n    def __sub__(self, s: AbstractSet[_T | None]) -> Set[_T]:\n        ...\n\n    def __isub__(self, s: AbstractSet[_T | None]) -> Set[_T]:\n        ...\n\n    def __xor__(self, s: AbstractSet[_S]) -> Set[_T | _S]:\n        ...\n\n    def __ixor__(self, s: AbstractSet[_S]) -> Set[_T | _S]:\n        ...\n\n    def __le__(self, s: AbstractSet[object]) -> bool:\n        ...\n\n    def __lt__(self, s: AbstractSet[object]) -> bool:\n        ...\n\n    def __ge__(self, s: AbstractSet[object]) -> bool:\n        ...\n\n    def __gt__(self, s: AbstractSet[object]) -> bool:\n        ...\n    __hash__: None\n    if sys.version_info >= (3, 9):\n\n        def __class_getitem__(cls, item: Any) -> GenericAlias:\n            ...\n\nclass enumerate(Iterator[Tuple[int, _T]], Generic[_T]):\n\n    def __init__(self, iterable: Iterable[_T], start: int=...) -> None:\n        ...\n\n    def __iter__(self) -> Iterator[Tuple[int, _T]]:\n        ...\n\n    def __next__(self) -> Tuple[int, _T]:\n        ...\n    if sys.version_info >= (3, 9):\n\n        def __class_getitem__(cls, item: Any) -> GenericAlias:\n            ...\n\nclass range(Sequence[int]):\n    start: int\n    stop: int\n    step: int\n\n    @overload\n    def __init__(self, stop: SupportsIndex) -> None:\n        ...\n\n    @overload\n    def __init__(self, start: SupportsIndex, stop: SupportsIndex, step: SupportsIndex=...) -> None:\n        ...\n\n    def __len__(self) -> int:\n        ...\n\n    def __contains__(self, o: object) -> bool:\n        ...\n\n    def __iter__(self) -> Iterator[int]:\n        ...\n\n    @overload\n    def __getitem__(self, i: SupportsIndex) -> int:\n        ...\n\n    @overload\n    def __getitem__(self, s: slice) -> range:\n        ...\n\n    def __repr__(self) -> str:\n        ...\n\n    def __reversed__(self) -> Iterator[int]:\n        ...\n\nclass property(object):\n    fget: Callable[[Any], Any] | None\n    fset: Callable[[Any, Any], None] | None\n    fdel: Callable[[Any], None] | None\n\n    def __init__(self, fget: Callable[[Any], Any] | None=..., fset: Callable[[Any, Any], None] | None=..., fdel: Callable[[Any], None] | None=..., doc: str | None=...) -> None:\n        ...\n\n    def getter(self, fget: Callable[[Any], Any]) -> property:\n        ...\n\n    def setter(self, fset: Callable[[Any, Any], None]) -> property:\n        ...\n\n    def deleter(self, fdel: Callable[[Any], None]) -> property:\n        ...\n\n    def __get__(self, obj: Any, type: type | None=...) -> Any:\n        ...\n\n    def __set__(self, obj: Any, value: Any) -> None:\n        ...\n\n    def __delete__(self, obj: Any) -> None:\n        ...\n\nclass _NotImplementedType(Any):\n    __call__: NotImplemented\nNotImplemented: _NotImplementedType\n\ndef abs(__x: SupportsAbs[_T]) -> _T:\n    ...\n\ndef all(__iterable: Iterable[object]) -> bool:\n    ...\n\ndef any(__iterable: Iterable[object]) -> bool:\n    ...\n\ndef bin(__number: int | SupportsIndex) -> str:\n    ...\nif sys.version_info >= (3, 7):\n\n    def breakpoint(*args: Any, **kws: Any) -> None:\n        ...\n\ndef callable(__obj: object) -> bool:\n    ...\n\ndef chr(__i: int) -> str:\n    ...\n_AnyStr_co = TypeVar('_AnyStr_co', str, bytes, covariant=True)\n\nclass _PathLike(Protocol[_AnyStr_co]):\n\n    def __fspath__(self) -> _AnyStr_co:\n        ...\nif sys.version_info >= (3, 10):\n\n    def aiter(__iterable: AsyncIterable[_T]) -> AsyncIterator[_T]:\n        ...\n\n    @overload\n    async def anext(__i: AsyncIterator[_T]) -> _T:\n        ...\n\n    @overload\n    async def anext(__i: AsyncIterator[_T], default: _VT) -> _T | _VT:\n        ...\n\ndef delattr(__obj: Any, __name: str) -> None:\n    ...\n\ndef dir(__o: object=...) -> list[str]:\n    ...\n\n@overload\ndef divmod(__x: SupportsDivMod[_T_contra, _T_co], __y: _T_contra) -> _T_co:\n    ...\n\n@overload\ndef divmod(__x: _T_contra, __y: SupportsRDivMod[_T_contra, _T_co]) -> _T_co:\n    ...\n\ndef eval(__source: str | bytes | CodeType, __globals: dict[str, Any] | None=..., __locals: Mapping[str, Any] | None=...) -> Any:\n    ...\n\ndef exec(__source: str | bytes | CodeType, __globals: dict[str, Any] | None=..., __locals: Mapping[str, Any] | None=...) -> Any:\n    ...\n\nclass filter(Iterator[_T], Generic[_T]):\n\n    @overload\n    def __init__(self, __function: None, __iterable: Iterable[_T | None]) -> None:\n        ...\n\n    @overload\n    def __init__(self, __function: Callable[[_T], Any], __iterable: Iterable[_T]) -> None:\n        ...\n\n    def __iter__(self) -> Iterator[_T]:\n        ...\n\n    def __next__(self) -> _T:\n        ...\n\n@overload\ndef getattr(__o: object, name: str) -> Any:\n    ...\n\n@overload\ndef getattr(__o: object, name: str, __default: None) -> Any | None:\n    ...\n\n@overload\ndef getattr(__o: object, name: str, __default: bool) -> Any | bool:\n    ...\n\n@overload\ndef getattr(__o: object, name: str, __default: _T) -> Any | _T:\n    ...\n\ndef globals() -> dict[str, Any]:\n    ...\n\ndef hasattr(__obj: object, __name: str) -> bool:\n    ...\n\ndef hash(__obj: object) -> int:\n    ...\n\ndef help(*args: Any, **kwds: Any) -> None:\n    ...\n\ndef hex(__number: int | SupportsIndex) -> str:\n    ...\n\ndef id(__obj: object) -> int:\n    ...\n\ndef input(__prompt: Any=...) -> str:\n    ...\n\n@overload\ndef iter(__iterable: Iterable[_T]) -> Iterator[_T]:\n    ...\n\n@overload\ndef iter(__function: Callable[[], _T | None], __sentinel: None) -> Iterator[_T]:\n    ...\n\n@overload\ndef iter(__function: Callable[[], _T], __sentinel: Any) -> Iterator[_T]:\n    ...\nif sys.version_info >= (3, 10):\n\n    def isinstance(__obj: object, __class_or_tuple: type | types.UnionType | Tuple[type | types.UnionType | Tuple[Any, ...], ...]) -> bool:\n        ...\n\n    def issubclass(__cls: type, __class_or_tuple: type | types.UnionType | Tuple[type | types.UnionType | Tuple[Any, ...], ...]) -> bool:\n        ...\nelse:\n\n    def isinstance(__obj: object, __class_or_tuple: type | Tuple[type | Tuple[Any, ...], ...]) -> bool:\n        ...\n\n    def issubclass(__cls: type, __class_or_tuple: type | Tuple[type | Tuple[Any, ...], ...]) -> bool:\n        ...\n\ndef len(__obj: Sized) -> int:\n    ...\n\ndef locals() -> dict[str, Any]:\n    ...\n\nclass map(Iterator[_S], Generic[_S]):\n\n    @overload\n    def __init__(self, __func: Callable[[_T1], _S], __iter1: Iterable[_T1]) -> None:\n        ...\n\n    @overload\n    def __init__(self, __func: Callable[[_T1, _T2], _S], __iter1: Iterable[_T1], __iter2: Iterable[_T2]) -> None:\n        ...\n\n    @overload\n    def __init__(self, __func: Callable[[_T1, _T2, _T3], _S], __iter1: Iterable[_T1], __iter2: Iterable[_T2], __iter3: Iterable[_T3]) -> None:\n        ...\n\n    @overload\n    def __init__(self, __func: Callable[[_T1, _T2, _T3, _T4], _S], __iter1: Iterable[_T1], __iter2: Iterable[_T2], __iter3: Iterable[_T3], __iter4: Iterable[_T4]) -> None:\n        ...\n\n    @overload\n    def __init__(self, __func: Callable[[_T1, _T2, _T3, _T4, _T5], _S], __iter1: Iterable[_T1], __iter2: Iterable[_T2], __iter3: Iterable[_T3], __iter4: Iterable[_T4], __iter5: Iterable[_T5]) -> None:\n        ...\n\n    @overload\n    def __init__(self, __func: Callable[..., _S], __iter1: Iterable[Any], __iter2: Iterable[Any], __iter3: Iterable[Any], __iter4: Iterable[Any], __iter5: Iterable[Any], __iter6: Iterable[Any], *iterables: Iterable[Any]) -> None:\n        ...\n\n    def __iter__(self) -> Iterator[_S]:\n        ...\n\n    def __next__(self) -> _S:\n        ...\n\n@overload\ndef max(__arg1: SupportsLessThanT, __arg2: SupportsLessThanT, *_args: SupportsLessThanT, key: None=...) -> SupportsLessThanT:\n    ...\n\n@overload\ndef max(__arg1: _T, __arg2: _T, *_args: _T, key: Callable[[_T], SupportsLessThan]) -> _T:\n    ...\n\n@overload\ndef max(__iterable: Iterable[SupportsLessThanT], *, key: None=...) -> SupportsLessThanT:\n    ...\n\n@overload\ndef max(__iterable: Iterable[_T], *, key: Callable[[_T], SupportsLessThan]) -> _T:\n    ...\n\n@overload\ndef max(__iterable: Iterable[SupportsLessThanT], *, key: None=..., default: _T) -> SupportsLessThanT | _T:\n    ...\n\n@overload\ndef max(__iterable: Iterable[_T1], *, key: Callable[[_T1], SupportsLessThan], default: _T2) -> _T1 | _T2:\n    ...\n\n@overload\ndef min(__arg1: SupportsLessThanT, __arg2: SupportsLessThanT, *_args: SupportsLessThanT, key: None=...) -> SupportsLessThanT:\n    ...\n\n@overload\ndef min(__arg1: _T, __arg2: _T, *_args: _T, key: Callable[[_T], SupportsLessThan]) -> _T:\n    ...\n\n@overload\ndef min(__iterable: Iterable[SupportsLessThanT], *, key: None=...) -> SupportsLessThanT:\n    ...\n\n@overload\ndef min(__iterable: Iterable[_T], *, key: Callable[[_T], SupportsLessThan]) -> _T:\n    ...\n\n@overload\ndef min(__iterable: Iterable[SupportsLessThanT], *, key: None=..., default: _T) -> SupportsLessThanT | _T:\n    ...\n\n@overload\ndef min(__iterable: Iterable[_T1], *, key: Callable[[_T1], SupportsLessThan], default: _T2) -> _T1 | _T2:\n    ...\n\n@overload\ndef next(__i: Iterator[_T]) -> _T:\n    ...\n\n@overload\ndef next(__i: Iterator[_T], default: _VT) -> _T | _VT:\n    ...\n\ndef oct(__number: int | SupportsIndex) -> str:\n    ...\n_OpenFile = Union[StrOrBytesPath, int]\n_Opener = Callable[[str, int], int]\n\n@overload\ndef open(file: _OpenFile, mode: OpenTextMode=..., buffering: int=..., encoding: str | None=..., errors: str | None=..., newline: str | None=..., closefd: bool=..., opener: _Opener | None=...) -> TextIO:\n    ...\n\n@overload\ndef open(file: _OpenFile, mode: OpenBinaryMode, buffering: int=..., encoding: None=..., errors: None=..., newline: None=..., closefd: bool=..., opener: _Opener | None=...) -> BinaryIO:\n    ...\n\n@overload\ndef open(file: _OpenFile, mode: str, buffering: int=..., encoding: str | None=..., errors: str | None=..., newline: str | None=..., closefd: bool=..., opener: _Opener | None=...) -> IO[Any]:\n    ...\n\ndef ord(__c: str | bytes) -> int:\n    ...\n\ndef print(*values: object, sep: str | None=..., end: str | None=..., file: SupportsWrite[str] | None=..., flush: bool=...) -> None:\n    ...\n_E = TypeVar('_E', contravariant=True)\n_M = TypeVar('_M', contravariant=True)\n\nclass _SupportsPow2(Protocol[_E, _T_co]):\n\n    def __pow__(self, __other: _E) -> _T_co:\n        ...\n\nclass _SupportsPow3(Protocol[_E, _M, _T_co]):\n\n    def __pow__(self, __other: _E, __modulo: _M) -> _T_co:\n        ...\nif sys.version_info >= (3, 8):\n\n    @overload\n    def pow(base: int, exp: int, mod: None=...) -> Any:\n        ...\n\n    @overload\n    def pow(base: int, exp: int, mod: int) -> int:\n        ...\n\n    @overload\n    def pow(base: float, exp: float, mod: None=...) -> float:\n        ...\n\n    @overload\n    def pow(base: _SupportsPow2[_E, _T_co], exp: _E) -> _T_co:\n        ...\n\n    @overload\n    def pow(base: _SupportsPow3[_E, _M, _T_co], exp: _E, mod: _M) -> _T_co:\n        ...\nelse:\n\n    @overload\n    def pow(__base: int, __exp: int, __mod: None=...) -> Any:\n        ...\n\n    @overload\n    def pow(__base: int, __exp: int, __mod: int) -> int:\n        ...\n\n    @overload\n    def pow(__base: float, __exp: float, __mod: None=...) -> float:\n        ...\n\n    @overload\n    def pow(__base: _SupportsPow2[_E, _T_co], __exp: _E) -> _T_co:\n        ...\n\n    @overload\n    def pow(__base: _SupportsPow3[_E, _M, _T_co], __exp: _E, __mod: _M) -> _T_co:\n        ...\n\nclass reversed(Iterator[_T], Generic[_T]):\n\n    @overload\n    def __init__(self, __sequence: Reversible[_T]) -> None:\n        ...\n\n    @overload\n    def __init__(self, __sequence: SupportsLenAndGetItem[_T]) -> None:\n        ...\n\n    def __iter__(self) -> Iterator[_T]:\n        ...\n\n    def __next__(self) -> _T:\n        ...\n\ndef repr(__obj: object) -> str:\n    ...\n\n@overload\ndef round(number: SupportsRound[Any]) -> int:\n    ...\n\n@overload\ndef round(number: SupportsRound[Any], ndigits: None) -> int:\n    ...\n\n@overload\ndef round(number: SupportsRound[_T], ndigits: SupportsIndex) -> _T:\n    ...\n\ndef setattr(__obj: object, __name: str, __value: Any) -> None:\n    ...\n\n@overload\ndef sorted(__iterable: Iterable[SupportsLessThanT], *, key: None=..., reverse: bool=...) -> list[SupportsLessThanT]:\n    ...\n\n@overload\ndef sorted(__iterable: Iterable[_T], *, key: Callable[[_T], SupportsLessThan], reverse: bool=...) -> list[_T]:\n    ...\nif sys.version_info >= (3, 8):\n\n    @overload\n    def sum(__iterable: Iterable[_T]) -> _T | int:\n        ...\n\n    @overload\n    def sum(__iterable: Iterable[_T], start: _S) -> _T | _S:\n        ...\nelse:\n\n    @overload\n    def sum(__iterable: Iterable[_T]) -> _T | int:\n        ...\n\n    @overload\n    def sum(__iterable: Iterable[_T], __start: _S) -> _T | _S:\n        ...\n\nclass zip(Iterator[_T_co], Generic[_T_co]):\n\n    @overload\n    def __new__(cls, __iter1: Iterable[_T1]) -> zip[Tuple[_T1]]:\n        ...\n\n    @overload\n    def __new__(cls, __iter1: Iterable[_T1], __iter2: Iterable[_T2]) -> zip[Tuple[_T1, _T2]]:\n        ...\n\n    @overload\n    def __new__(cls, __iter1: Iterable[_T1], __iter2: Iterable[_T2], __iter3: Iterable[_T3]) -> zip[Tuple[_T1, _T2, _T3]]:\n        ...\n\n    @overload\n    def __new__(cls, __iter1: Iterable[_T1], __iter2: Iterable[_T2], __iter3: Iterable[_T3], __iter4: Iterable[_T4]) -> zip[Tuple[_T1, _T2, _T3, _T4]]:\n        ...\n\n    @overload\n    def __new__(cls, __iter1: Iterable[_T1], __iter2: Iterable[_T2], __iter3: Iterable[_T3], __iter4: Iterable[_T4], __iter5: Iterable[_T5]) -> zip[Tuple[_T1, _T2, _T3, _T4, _T5]]:\n        ...\n\n    @overload\n    def __new__(cls, __iter1: Iterable[Any], __iter2: Iterable[Any], __iter3: Iterable[Any], __iter4: Iterable[Any], __iter5: Iterable[Any], __iter6: Iterable[Any], *iterables: Iterable[Any]) -> zip[Tuple[Any, ...]]:\n        ...\n\n    def __iter__(self) -> Iterator[_T_co]:\n        ...\n\n    def __next__(self) -> _T_co:\n        ...\n\ndef __import__(name: str, globals: Mapping[str, Any] | None=..., locals: Mapping[str, Any] | None=..., fromlist: Sequence[str]=..., level: int=...) -> Any:\n    ...\n\nclass ellipsis:\n    ...\nEllipsis: ellipsis\n\nclass BaseException(object):\n    args: Tuple[Any, ...]\n    __cause__: BaseException | None\n    __context__: BaseException | None\n    __suppress_context__: bool\n    __traceback__: TracebackType | None\n\n    def __init__(self, *args: object) -> None:\n        ...\n\n    def __str__(self) -> str:\n        ...\n\n    def __repr__(self) -> str:\n        ...\n\n    def with_traceback(self: _TBE, tb: TracebackType | None) -> _TBE:\n        ...\n\nclass GeneratorExit(BaseException):\n    ...\n\nclass KeyboardInterrupt(BaseException):\n    ...\n\nclass SystemExit(BaseException):\n    code: int\n\nclass Exception(BaseException):\n    ...\n\nclass StopIteration(Exception):\n    value: Any\n_StandardError = Exception\n\nclass OSError(Exception):\n    errno: int\n    strerror: str\n    filename: Any\n    filename2: Any\n    if sys.platform == 'win32':\n        winerror: int\nif sys.platform == 'win32':\n    WindowsError = OSError\n\nclass ArithmeticError(_StandardError):\n    ...\n\nclass AssertionError(_StandardError):\n    ...\n\nclass AttributeError(_StandardError):\n    if sys.version_info >= (3, 10):\n        name: str\n        obj: object\n\nclass EOFError(_StandardError):\n    ...\n\nclass ImportError(_StandardError):\n\n    def __init__(self, *args: object, name: str | None=..., path: str | None=...) -> None:\n        ...\n    name: str | None\n    path: str | None\n    msg: str\n\nclass LookupError(_StandardError):\n    ...\n\nclass MemoryError(_StandardError):\n    ...\n\nclass NameError(_StandardError):\n    if sys.version_info >= (3, 10):\n        name: str\n\nclass RuntimeError(_StandardError):\n    ...\n\nclass StopAsyncIteration(Exception):\n    value: Any\n\nclass SyntaxError(_StandardError):\n    msg: str\n    lineno: int | None\n    offset: int | None\n    text: str | None\n    filename: str | None\n    if sys.version_info >= (3, 10):\n        end_lineno: int | None\n        end_offset: int | None\n\nclass TypeError(_StandardError):\n    ...\n\nclass ValueError(_StandardError):\n    ...\n\nclass FloatingPointError(ArithmeticError):\n    ...\n\nclass OverflowError(ArithmeticError):\n    ...\n\nclass ZeroDivisionError(ArithmeticError):\n    ...\n\nclass IndexError(LookupError):\n    ...\n\nclass KeyError(LookupError):\n    ...\n\nclass NotImplementedError(RuntimeError):\n    ...\n\nclass IndentationError(SyntaxError):\n    ...\n\nclass TabError(IndentationError):\n    ...",
    "/typeshed/stdlib/errno.pyi": "from typing import Mapping\nerrorcode: Mapping[int, str]\nEACCES: int\nEADDRINUSE: int\nEAGAIN: int\nEALREADY: int\nEBADF: int\nECONNABORTED: int\nECONNREFUSED: int\nECONNRESET: int\nEEXIST: int\nEHOSTUNREACH: int\nEINPROGRESS: int\nEINVAL: int\nEIO: int\nEISDIR: int\nENOBUFS: int\nENODEV: int\nENOENT: int\nENOMEM: int\nENOTCONN: int\nEOPNOTSUPP: int\nEPERM: int\nETIMEDOUT: int",
    "/typeshed/stdlib/gc.pyi": "\"\"\"Control the garbage collector (gc)\"\"\"\nfrom typing import overload\n\ndef enable() -> None:\n    \"\"\"Enable automatic garbage collection. (enable)\"\"\"\n    ...\n\ndef disable() -> None:\n    \"\"\"Disable automatic garbage collection. (disable)\n\nHeap memory can still be allocated,\nand garbage collection can still be initiated manually using ``gc.collect``.\"\"\"\n\ndef collect() -> None:\n    \"\"\"Run a garbage collection. (collect)\"\"\"\n    ...\n\ndef mem_alloc() -> int:\n    \"\"\"Get the number of bytes of heap RAM that are allocated. (mem alloc)\n\n:return: The number of bytes allocated.\n\nThis function is MicroPython extension.\"\"\"\n    ...\n\ndef mem_free() -> int:\n    \"\"\"Get the number of bytes of available heap RAM, or -1 if this amount is not known. (mem free)\n\n:return: The number of bytes free.\n\nThis function is MicroPython extension.\"\"\"\n    ...\n\n@overload\ndef threshold() -> int:\n    \"\"\"Query the additional GC allocation threshold. (threshold)\n\n:return: The GC allocation threshold.\n\nThis function is a MicroPython extension. CPython has a similar\nfunction - ``set_threshold()``, but due to different GC\nimplementations, its signature and semantics are different.\"\"\"\n    ...\n\n@overload\ndef threshold(amount: int) -> None:\n    \"\"\"Set the additional GC allocation threshold. (threshold)\n\nNormally, a collection is triggered only when a new allocation\ncannot be satisfied, i.e. on an  out-of-memory (OOM) condition.\nIf this function is called, in addition to OOM, a collection\nwill be triggered each time after ``amount`` bytes have been\nallocated (in total, since the previous time such an amount of bytes\nhave been allocated). ``amount`` is usually specified as less than the\nfull heap size, with the intention to trigger a collection earlier than when the\nheap becomes exhausted, and in the hope that an early collection will prevent\nexcessive memory fragmentation. This is a heuristic measure, the effect\nof which will vary from application to application, as well as\nthe optimal value of the ``amount`` parameter.\n\nA value of -1 means a disabled allocation threshold.\n\nThis function is a MicroPython extension. CPython has a similar\nfunction - ``set_threshold()``, but due to different GC\nimplementations, its signature and semantics are different.\n\n:param amount: (amount) The number of bytes after which a garbage collection should be triggered.\"\"\"\n    ...",
    "/typeshed/stdlib/log.pyi": "\"\"\"Log data to your micro:bit V2. (log)\"\"\"\nfrom typing import Literal, Optional, Union, overload\nMILLISECONDS = 1\n\"\"\"Milliseconds timestamp format. (milliseconds)\"\"\"\nSECONDS = 10\n\"\"\"Seconds timestamp format. (seconds)\"\"\"\nMINUTES = 600\n\"\"\"Minutes timestamp format. (minutes)\"\"\"\nHOURS = 36000\n\"\"\"Hours timestamp format. (hours)\"\"\"\nDAYS = 864000\n\"\"\"Days timestamp format. (days)\"\"\"\n\ndef set_labels(*args: str, timestamp: Optional[Literal[1, 10, 36000, 864000]]=MILLISECONDS) -> None:\n    \"\"\"Set up the log file header. (set labels)\n\nExample: ``log.set_labels('x', 'y', 'z', log.SECONDS)``\n\nEach call to this function with positional arguments will generate a new\nheader entry into the log file.\n\nIf the program starts and a log file already exists it will compare the\nlabels set up by this function call to the last headers declared in the\nfile. If the headers are different it will add a new header entry at the\nend of the file.\n\n:param *args: (*args) A positional argument for each log header.\n:param timestamp: (timestamp) The timestamp unit that will be automatically added as the first column in every row.\nSetting this argument to `None` disables the timestamp. Pass the ``log.MILLISECONDS``, ``log.SECONDS``, , ``log.MINUTES``, ``log.HOURS`` or ``log.DAYS`` values defined by this module. An invalid value will throw an exception.\"\"\"\n    ...\n\n@overload\ndef add(log_data: Optional[dict[str, Union[str, int, float]]]) -> None:\n    \"\"\"Add a data row to the log by passing a dictionary of headers and values. (add)\n\nExample: ``log.add({ 'temp': temperature() })``\n\nEach call to this function adds a row to the log.\n\nDictionary keys not already specified via the ``set_labels`` function,\nor by a previous call to this function, will trigger a new header\nentry to be added to the log with the extra label.\n\nLabels previously specified and not present in this function call will be\nskipped with an empty value in the log row.\n\n:param log_data: (log data) The data to log as a dictionary with a key for each header.\"\"\"\n    ...\n\n@overload\ndef add(**kwargs: Union[str, int, float]) -> None:\n    \"\"\"Add a data row to the log using keyword arguments. (add)\n\nExample: ``log.add(temp=temperature())``\n\nEach call to this function adds a row to the log.\n\nKeyword arguments not already specified via the ``set_labels`` function,\nor by a previous call to this function, will trigger a new header entry\nto be added to the log with the extra label.\n\nLabels previously specified and not present in this function call will be\nskipped with an empty value in the log row.\"\"\"\n    ...\n\ndef delete(full=False):\n    \"\"\"Deletes the contents of the log, including headers. (delete)\n\nExample: ``log.delete()``\n\nTo add the log headers the ``set_labels`` function has to be called again\nafter this.\n\n:param full: (full) Selects a \"full\" erase format that removes the data from the flash storage.\nIf set to ``False`` it uses a \"fast\" method, which invalidates the data instead of performing a slower full erase.\"\"\"\n    ...\n\ndef set_mirroring(serial: bool):\n    \"\"\"Mirrors the data logging activity to the serial output. (set mirroring)\n\nExample: ``log.set_mirroring(true)``\n\nMirroring is disabled by default.\n\n:param serial: (serial) Pass ``True`` to mirror the data logging activity to the serial output, ``False`` to disable mirroring.\"\"\"\n    ...",
    "/typeshed/stdlib/love.pyi": "def badaboom() -> None:\n    ...",
    "/typeshed/stdlib/machine.pyi": "\"\"\"Low-level utilities. (machine)\"\"\"\nfrom typing import Any\nfrom .microbit import MicroBitDigitalPin\n\ndef unique_id() -> bytes:\n    \"\"\"Get a byte string with a unique identifier of a board. (unique id)\n\nExample: ``machine.unique_id()``\n\n:return: An identifier that varies from one board instance to another.\"\"\"\n    ...\n\ndef reset() -> None:\n    \"\"\"Reset the device in a manner similar to pushing the external RESET button. (reset)\n\nExample: ``machine.reset()``\"\"\"\n    ...\n\ndef freq() -> int:\n    \"\"\"Get the CPU frequency in hertz. (freq)\n\nExample: ``machine.freq()``\n\n:return: The CPU frequency.\"\"\"\n    ...\n\ndef disable_irq() -> Any:\n    \"\"\"Disable interrupt requests. (disable irq)\n\nExample: ``interrupt_state = machine.disable_irq()``\n\n:return: the previous IRQ state which should be considered an opaque value\n\nThe return value should be passed to the ``enable_irq`` function to restore\ninterrupts to their original state.\"\"\"\n    ...\n\ndef enable_irq(state: Any) -> None:\n    \"\"\"Re-enable interrupt requests. (enable irq)\n\nExample: ``machine.enable_irq(interrupt_state)``\n\n:param state: (state) The value that was returned from the most recent call to the ``disable_irq`` function.\"\"\"\n    ...\n\ndef time_pulse_us(pin: MicroBitDigitalPin, pulse_level: int, timeout_us: int=1000000) -> int:\n    \"\"\"Time a pulse on a pin. (time pulse us)\n\nExample: ``time_pulse_us(pin0, 1)``\n\nIf the current input value of the pin is different to ``pulse_level``, the\nfunction first waits until the pin input becomes equal to\n``pulse_level``, then times the duration that the pin is equal to\n``pulse_level``. If the pin is already equal to ``pulse_level`` then timing\nstarts straight away.\n\n:param pin: (pin) The pin to use\n:param pulse_level: (pulse level) 0 to time a low pulse or 1 to time a high pulse\n:param timeout_us: (timeout us) A microsecond timeout\n:return: The duration of the pulse in microseconds, or -1 for a timeout waiting for the level to match ``pulse_level``, or -2 on timeout waiting for the pulse to end\"\"\"\n    ...\n\nclass mem:\n    \"\"\"The class for the ``mem8``, ``mem16`` and ``mem32`` memory views. (mem)\"\"\"\n\n    def __getitem__(self, address: int) -> int:\n        \"\"\"Access a value from memory. (getitem)\n\n:param address: (address) The memory address.\n:return: The value at that address as an integer.\"\"\"\n        ...\n\n    def __setitem__(self, address: int, value: int) -> None:\n        \"\"\"Set a value at the given address. (setitem)\n\n:param address: (address) The memory address.\n:param value: (value) The integer value to set.\"\"\"\n        ...\nmem8: mem\n\"\"\"8-bit (byte) view of memory. (mem8)\"\"\"\nmem16: mem\n\"\"\"16-bit view of memory. (mem16)\"\"\"\nmem32: mem\n\"\"\"32-bit view of memory. (mem32)\"\"\"",
    "/typeshed/stdlib/math.pyi": "\"\"\"Mathematical functions. (math)\"\"\"\nfrom typing import Tuple\n\ndef acos(x: float) -> float:\n    \"\"\"Calculate the inverse cosine. (acos)\n\nExample: ``math.acos(1)``\n\n:param x: (x) A number\n:return: The inverse cosine of ``x``\"\"\"\n    ...\n\ndef asin(x: float) -> float:\n    \"\"\"Calculate the inverse sine. (asin)\n\nExample: ``math.asin(0)``\n\n:param x: (x) A number\n:return: The inverse sine of ``x``\"\"\"\n    ...\n\ndef atan(x: float) -> float:\n    \"\"\"Calculate the inverse tangent. (atan)\n\nExample: ``math.atan(0)``\n\n:param x: (x) A number\n:return: The inverse tangent of ``x``\"\"\"\n    ...\n\ndef atan2(y: float, x: float) -> float:\n    \"\"\"Calculate the principal value of the inverse tangent of ``y/x``. (atan2)\n\nExample: ``math.atan2(0, -1)``\n\n:param y: (x) (y) A number\n:param x: (x) (y) A number\n:return: The principal value of the inverse tangent of ``y/x``\"\"\"\n    ...\n\ndef ceil(x: float) -> float:\n    \"\"\"Round a number towards positive infinity. (ceil)\n\nExample: ``math.ceil(0.1)``\n\n:param x: (x) A number\n:return: ``x`` rounded towards positive infinity.\"\"\"\n    ...\n\ndef copysign(x: float, y: float) -> float:\n    \"\"\"Calculate ``x`` with the sign of ``y``. (copysign)\n\nExample: ``math.copysign(1, -1)``\n\n:param x: (x) A number\n:param y: (y) The source of the sign for the return value\n:return: ``x`` with the sign of ``y``\"\"\"\n    ...\n\ndef cos(x: float) -> float:\n    \"\"\"Calculate the cosine of ``x``. (cos)\n\nExample: ``math.cos(0)``\n\n:param x: (x) A number\n:return: The cosine of ``x``\"\"\"\n    ...\n\ndef degrees(x: float) -> float:\n    \"\"\"Convert radians to degrees. (degrees)\n\nExample: ``math.degrees(2 * math.pi)``\n\n:param x: (x) A value in radians\n:return: The value converted to degrees\"\"\"\n    ...\n\ndef exp(x: float) -> float:\n    \"\"\"Calculate the exponential of ``x``. (exp)\n\nExample: ``math.exp(1)``\n\n:param x: (x) A number\n:return: The exponential of ``x``.\"\"\"\n    ...\n\ndef fabs(x: float) -> float:\n    \"\"\"Return the absolute value of ``x``. (fabs)\n\nExample: ``math.fabs(-0.1)``\n\n:param x: (x) A number\n:return: The absolute value of ``x``\"\"\"\n    ...\n\ndef floor(x: float) -> int:\n    \"\"\"Round a number towards negative infinity. (floor)\n\nExample: ``math.floor(0.9)``\n\n:param x: (x) A number\n:return: ``x`` rounded towards negative infinity.\"\"\"\n    ...\n\ndef fmod(x: float, y: float) -> float:\n    \"\"\"Calculate the remainder of ``x/y``. (fmod)\n\nExample: ``math.fmod(10, 3)``\n\n:param x: (x) The numerator\n:param y: (y) The denominator\"\"\"\n    ...\n\ndef frexp(x: float) -> Tuple[float, int]:\n    \"\"\"Decomposes a floating-point number into its mantissa and exponent. (frexp)\n\nExample: ``mantissa, exponent = math.frexp(2)``\n\nThe returned value is the tuple ``(m, e)`` such that ``x == m * 2**e``\nexactly.  If ``x == 0`` then the function returns ``(0.0, 0)``, otherwise\nthe relation ``0.5 <= abs(m) < 1`` holds.\n\n:param x: (x) A floating-point number\n:return: A tuple of length two containing its mantissa then exponent\"\"\"\n    ...\n\ndef isfinite(x: float) -> bool:\n    \"\"\"Check if a value is finite. (isfinite)\n\nExample: ``math.isfinite(float('inf'))``\n\n:param x: (x) A number.\n:return: ``True`` if ``x`` is finite, ``False`` otherwise.\"\"\"\n    ...\n\ndef isinf(x: float) -> bool:\n    \"\"\"Check if a value is infinite. (isinf)\n\nExample: ``math.isinf(float('-inf'))``\n\n:param x: (x) A number.\n:return: ``True`` if ``x`` is infinite, ``False`` otherwise.\"\"\"\n    ...\n\ndef isnan(x: float) -> bool:\n    \"\"\"Check is a value is not-a-number (NaN). (isnan)\n\nExample: ``math.isnan(float('nan'))``\n\n:param x: (x) A number\n:return: ``True`` if ``x`` is not-a-number (NaN), ``False`` otherwise.\"\"\"\n    ...\n\ndef ldexp(x: float, exp: int) -> float:\n    \"\"\"Calculate ``x * (2**exp)``. (ldexp)\n\nExample: ``math.ldexp(0.5, 2)``\n\n:param x: (x) A number\n:param exp: (exp) Integer exponent\n:return: ``x * (2**exp)``\"\"\"\n    ...\n\ndef log(x: float, base: float=e) -> float:\n    \"\"\"Calculate the logarithm of ``x`` to the given base (defaults to natural logorithm). (log)\n\nExample: ``math.log(math.e)``\n\nWith one argument, return the natural logarithm of x (to base e).\n\nWith two arguments, return the logarithm of x to the given base, calculated as ``log(x)/log(base)``.\n\n:param x: (x) A number\n:param base: (base) The base to use\n:return: The natural logarithm of ``x``\"\"\"\n    ...\n\ndef modf(x: float) -> Tuple[float, float]:\n    \"\"\"Calculate the fractional and integral parts of ``x``. (modf)\n\nExample: ``fractional, integral = math.modf(1.5)``\n\n:param x: (x) A number\n:return: A tuple of two floats representing the fractional then integral parts of ``x``.\n\nBoth the fractional and integral values have the same sign as ``x``.\"\"\"\n    ...\n\ndef pow(x: float, y: float) -> float:\n    \"\"\"Returns ``x`` to the power of ``y``. (pow)\n\nExample: ``math.pow(4, 0.5)``\n\n:param x: (x) A number\n:param y: (y) The exponent\n:return: ``x`` to the power of ``y``\"\"\"\n    ...\n\ndef radians(x: float) -> float:\n    \"\"\"Convert a degrees to radians. (radians)\n\nExample: ``math.radians(360)``\n\n:param x: (x) A value in degrees\n:return: The value converted to radians\"\"\"\n    ...\n\ndef sin(x: float) -> float:\n    \"\"\"Calculate the sine of ``x``. (sin)\n\nExample: ``math.sin(math.pi/2)``\n\n:param x: (x) A number\n:return: The sine of ``x``\"\"\"\n    ...\n\ndef sqrt(x: float) -> float:\n    \"\"\"Calculate the square root of ``x``. (sqrt)\n\nExample: ``math.sqrt(4)``\n\n:param x: (x) A number\n:return: The square root of ``x``\"\"\"\n    ...\n\ndef tan(x: float) -> float:\n    \"\"\"Calculate the tangent of ``x``. (tan)\n\nExample: ``math.tan(0)``\n\n:param x: (x) A number\n:return: The tangent of ``x``.\"\"\"\n    ...\n\ndef trunc(x: float) -> int:\n    \"\"\"Round a number towards 0. (trunc)\n\nExample: ``math.trunc(-0.9)``\n\n:param x: (x) A number\n:return: ``x`` rounded towards zero.\"\"\"\n    ...\ne: float\n\"\"\"Base of the natural logarithm (e)\"\"\"\npi: float\n\"\"\"The ratio of a circle's circumference to its diameter (pi)\"\"\"",
    "/typeshed/stdlib/micropython.pyi": "\"\"\"MicroPython internals. (micropython)\"\"\"\nfrom typing import Any, TypeVar, overload\n_T = TypeVar('_T')\n\ndef const(expr: _T) -> _T:\n    \"\"\"Used to declare that the expression is a constant so that the compiler can\noptimise it. (const)\n\nThe use of this function should be as follows::\n\n    from micropython import const\n    CONST_X = const(123)\n    CONST_Y = const(2 * CONST_X + 1)\n\nConstants declared this way are still accessible as global variables from\noutside the module they are declared in. On the other hand, if a constant\nbegins with an underscore then it is hidden, it is not available as a\nglobal variable, and does not take up any memory during execution.\n\n:param expr: (expr) A constant expression.\"\"\"\n    ...\n\n@overload\ndef opt_level() -> int:\n    \"\"\"Get the current optimisation level for the compilation of scripts. (opt level)\n\nExample: ``micropython.opt_level()``\n\nThe optimisation level controls the following compilation features:\n\n- Assertions: at level 0 assertion statements are enabled and compiled\n  into the bytecode; at levels 1 and higher assertions are not compiled.\n\n- Built-in ``__debug__`` variable: at level 0 this variable expands to\n  True; at levels 1 and higher it expands to False.\n\n- Source-code line numbers: at levels 0, 1 and 2 source-code line number\n  are stored along with the bytecode so that exceptions can report the\n  line number they occurred at; at levels 3 and higher line numbers are\n  not stored.\n\n:return: An integer representing the current level.\"\"\"\n    ...\n\n@overload\ndef opt_level(level: int) -> None:\n    \"\"\"Sets the optimisation level for subsequent compilation of scripts. (opt level)\n\nExample: ``micropython.opt_level(1)``\n\nThe optimisation level controls the following compilation features:\n\n- Assertions: at level 0 assertion statements are enabled and compiled\n  into the bytecode; at levels 1 and higher assertions are not compiled.\n\n- Built-in ``__debug__`` variable: at level 0 this variable expands to\n  True; at levels 1 and higher it expands to False.\n\n- Source-code line numbers: at levels 0, 1 and 2 source-code line number\n  are stored along with the bytecode so that exceptions can report the\n  line number they occurred at; at levels 3 and higher line numbers are\n  not stored.\n\nThe default optimisation level is usually level 0.\n\n:param level: (level) An integer optimisation level.\"\"\"\n    ...\n\ndef mem_info(verbose: Any=None) -> None:\n    \"\"\"Print information about currently used memory. (mem info)\n\nExample: ``micropython.mem_info()``\n\n:param verbose: (verbose) If the ``verbose`` argument is given then extra information is printed.\"\"\"\n    ...\n\ndef qstr_info(verbose: Any=None) -> None:\n    \"\"\"Print information about currently interned strings. (qstr info)\n\nExample: ``micropython.qstr_info()``\n\n:param verbose: (verbose) If the ``verbose`` argument is given then extra information is printed.\n\nThe information that is printed is implementation dependent, but currently\nincludes the number of interned strings and the amount of RAM they use.  In\nverbose mode it prints out the names of all RAM-interned strings.\"\"\"\n    ...\n\ndef stack_use() -> int:\n    \"\"\"Return an integer representing the current amount of stack that is being\nused. (stack use)\n\nExample: ``micropython.stack_use()``\n\nThe absolute value of this is not particularly useful, rather it\nshould be used to compute differences in stack usage at different points.\n\n:return: An integer representing current stack use.\"\"\"\n    ...\n\ndef heap_lock() -> None:\n    \"\"\"Lock the heap. (heap lock)\n\nExample: ``micropython.heap_lock()``\n\nWhen locked no memory allocation can occur and a `MemoryError` will be\nraised if any heap allocation is attempted.\"\"\"\n    ...\n\ndef heap_unlock() -> None:\n    \"\"\"Unlock the heap. (heap unlock)\n\nExample: ``micropython.heap_unlock()``\n\nWhen locked no memory allocation can occur and a `MemoryError` will be\nraised if any heap allocation is attempted.\"\"\"\n    ...\n\ndef kbd_intr(chr: int) -> None:\n    \"\"\"Set the character that will raise a `KeyboardInterrupt` exception. (kbd intr)\n\nExample: ``micropython.kbd_intr(-1)``\n\n:param chr: (chr) Character code to raise the interrupt or -1 to disable capture of Ctrl-C.\n\nBy default this is set to 3 during script execution, corresponding to Ctrl-C.\nPassing -1 to this function will disable capture of Ctrl-C, and passing 3\nwill restore it.\n\nThis function can be used to prevent the capturing of Ctrl-C on the\nincoming stream of characters that is usually used for the REPL, in case\nthat stream is used for other purposes.\"\"\"\n    ...",
    "/typeshed/stdlib/music.pyi": "\"\"\"Create and play melodies. (music)\"\"\"\nfrom typing import Tuple, Union, List\nfrom .microbit import MicroBitDigitalPin, pin0\nDADADADUM: Tuple[str, ...]\n\"\"\"Melody: the opening to Beethoven\u2019s 5th Symphony in C minor. (dadadadum)\"\"\"\nENTERTAINER: Tuple[str, ...]\n\"\"\"Melody: the opening fragment of Scott Joplin\u2019s Ragtime classic \u201cThe Entertainer\u201d. (entertainer)\"\"\"\nPRELUDE: Tuple[str, ...]\n\"\"\"Melody: the opening of the first Prelude in C Major of J.S.Bach\u2019s 48 Preludes and Fugues. (prelude)\"\"\"\nODE: Tuple[str, ...]\n\"\"\"Melody: the \u201cOde to Joy\u201d theme from Beethoven\u2019s 9th Symphony in D minor. (ode)\"\"\"\nNYAN: Tuple[str, ...]\n\"\"\"Melody: the Nyan Cat theme (http://www.nyan.cat/). (nyan)\n\nThe composer is unknown. This is fair use for educational porpoises (as they say in New York).\"\"\"\nRINGTONE: Tuple[str, ...]\n\"\"\"Melody: something that sounds like a mobile phone ringtone. (ringtone)\n\nTo be used to indicate an incoming message.\n\"\"\"\nFUNK: Tuple[str, ...]\n\"\"\"Melody: a funky bass line for secret agents and criminal masterminds. (funk)\"\"\"\nBLUES: Tuple[str, ...]\n\"\"\"Melody: a boogie-woogie 12-bar blues walking bass. (blues)\"\"\"\nBIRTHDAY: Tuple[str, ...]\n\"\"\"Melody: \u201cHappy Birthday to You\u2026\u201d (birthday)\n\nFor copyright status see: http://www.bbc.co.uk/news/world-us-canada-34332853\n\"\"\"\nWEDDING: Tuple[str, ...]\n\"\"\"Melody: the bridal chorus from Wagner\u2019s opera \u201cLohengrin\u201d. (wedding)\"\"\"\nFUNERAL: Tuple[str, ...]\n\"\"\"Melody: the \u201cfuneral march\u201d otherwise known as Fr\u00e9d\u00e9ric Chopin\u2019s Piano Sonata No. 2 in B\u266d minor, Op. 35. (funeral)\"\"\"\nPUNCHLINE: Tuple[str, ...]\n\"\"\"Melody: a fun fragment that signifies a joke has been made. (punchline)\"\"\"\nPYTHON: Tuple[str, ...]\n\"\"\"Melody: John Philip Sousa\u2019s march \u201cLiberty Bell\u201d aka, the theme for \u201cMonty Python\u2019s Flying Circus\u201d (after which the Python programming language is named). (python)\"\"\"\nBADDY: Tuple[str, ...]\n\"\"\"Melody: silent movie era entrance of a baddy. (baddy)\"\"\"\nCHASE: Tuple[str, ...]\n\"\"\"Melody: silent movie era chase scene. (chase)\"\"\"\nBA_DING: Tuple[str, ...]\n\"\"\"Melody: a short signal to indicate something has happened. (ba ding)\"\"\"\nWAWAWAWAA: Tuple[str, ...]\n\"\"\"Melody: a very sad trombone. (wawawawaa)\"\"\"\nJUMP_UP: Tuple[str, ...]\n\"\"\"Melody: for use in a game, indicating upward movement. (jump up)\"\"\"\nJUMP_DOWN: Tuple[str, ...]\n\"\"\"Melody: for use in a game, indicating downward movement. (jump down)\"\"\"\nPOWER_UP: Tuple[str, ...]\n\"\"\"Melody: a fanfare to indicate an achievement unlocked. (power up)\"\"\"\nPOWER_DOWN: Tuple[str, ...]\n\"\"\"Melody: a sad fanfare to indicate an achievement lost. (power down)\"\"\"\n\ndef set_tempo(ticks: int=4, bpm: int=120) -> None:\n    \"\"\"Sets the approximate tempo for playback. (set tempo)\n\nExample: ``music.set_tempo(bpm=120)``\n\n:param ticks: (ticks) The number of ticks constituting a beat.\n:param bpm: (bpm) An integer determining how many beats per minute.\n\nSuggested default values allow the following useful behaviour:\n\n- music.set_tempo() \u2013 reset the tempo to default of ticks = 4, bpm = 120\n- music.set_tempo(ticks=8) \u2013 change the \u201cdefinition\u201d of a beat\n- music.set_tempo(bpm=180) \u2013 just change the tempo\n\nTo work out the length of a tick in milliseconds is very simple arithmetic:\n60000/bpm/ticks_per_beat. For the default values that\u2019s\n60000/120/4 = 125 milliseconds or 1 beat = 500 milliseconds.\"\"\"\n    ...\n\ndef get_tempo() -> Tuple[int, int]:\n    \"\"\"Gets the current tempo as a tuple of integers: ``(ticks, bpm)``. (get tempo)\n\nExample: ``ticks, beats = music.get_tempo()``\n\n:return: The temp as a tuple with two integer values, the ticks then the beats per minute.\"\"\"\n    ...\n\ndef play(music: Union[str, List[str], Tuple[str, ...]], pin: Union[MicroBitDigitalPin, None]=pin0, wait: bool=True, loop: bool=False) -> None:\n    \"\"\"Plays music. (play)\n\nExample: ``music.play(music.NYAN)``\n\n:param music: (music) music specified in `a special notation <https://microbit-micropython.readthedocs.io/en/v2-docs/music.html#musical-notation>`_\n:param pin: (pin) the output pin for use with an external speaker (default ``pin0``), ``None`` for no sound.\n:param wait: (wait) If ``wait`` is set to ``True``, this function is blocking.\n:param loop: (loop) If ``loop`` is set to ``True``, the tune repeats until ``stop`` is called or the blocking call is interrupted.\n\nMany built-in melodies are defined in this module.\"\"\"\n    ...\n\ndef pitch(frequency: int, duration: int=-1, pin: MicroBitDigitalPin=pin0, wait: bool=True) -> None:\n    \"\"\"Play a note. (pitch)\n\nExample: ``music.pitch(185, 1000)``\n\n:param frequency: (frequency) An integer frequency\n:param duration: (duration) A millisecond duration. If negative then sound is continuous until the next call or a call to ``stop``.\n:param pin: (pin) Optional output pin (default ``pin0``).\n:param wait: (wait) If ``wait`` is set to ``True``, this function is blocking.\n\nFor example, if the frequency is set to 440 and the length to\n1000 then we hear a standard concert A for one second.\n\nYou can only play one pitch on one pin at any one time.\"\"\"\n    ...\n\ndef stop(pin: MicroBitDigitalPin=pin0) -> None:\n    \"\"\"Stops all music playback on the built-in speaker and any pin outputting sound. (stop)\n\nExample: ``music.stop()``\n\n:param pin: (pin) An optional argument can be provided to specify a pin, e.g. ``music.stop(pin1)``.\"\"\"\n\ndef reset() -> None:\n    \"\"\"Resets ticks, bpm, duration and octave to their default values. (reset)\n\nExample: ``music.reset()``\n\nValues:\n- ``ticks = 4``\n- ``bpm = 120``\n- ``duration = 4``\n- ``octave = 4``\"\"\"\n    ...",
    "/typeshed/stdlib/neopixel.pyi": "\"\"\"Individually addressable RGB and RGBW LED strips. (neopixel)\"\"\"\nfrom .microbit import MicroBitDigitalPin\nfrom typing import Tuple\n\nclass NeoPixel:\n\n    def __init__(self, pin: MicroBitDigitalPin, n: int, bpp: int=3) -> None:\n        \"\"\"Initialise a new strip of neopixel LEDs controlled via a pin. (init)\n\nExample: ``np = neopixel.NeoPixel(pin0, 8)``\n\nRGBW neopixels are only supported by micro:bit V2.\n\nSee `the online docs <https://microbit-micropython.readthedocs.io/en/v2-docs/neopixel.html>`_ for warnings and other advice.\n\n:param pin: (pin) The pin controlling the neopixel strip.\n:param n: (n) The number of neopixels in the strip.\n:param bpp: (bpp) Bytes per pixel. For micro:bit V2 RGBW neopixel support, pass 4 rather than the default of 3 for RGB and GRB.\"\"\"\n        ...\n\n    def clear(self) -> None:\n        \"\"\"Clear all the pixels. (clear)\n\nExample: ``np.clear()``\"\"\"\n        ...\n\n    def show(self) -> None:\n        \"\"\"Show the pixels. (show)\n\nExample: ``np.show()``\n\nMust be called for any updates to become visible.\"\"\"\n        ...\n\n    def write(self) -> None:\n        \"\"\"Show the pixels (micro:bit V2 only). (write)\n\nExample: ``np.write()``\n\nMust be called for any updates to become visible.\n\nEquivalent to ``show``.\"\"\"\n        ...\n\n    def fill(self, colour: Tuple[int, ...]) -> None:\n        \"\"\"Colour all pixels a given RGB/RGBW value. (fill)\n\nExample: ``np.fill((0, 0, 255))``\n\n:param colour: (colour) A tuple of the same length as the number of bytes per pixel (bpp).\n\nUse in conjunction with ``show()`` to update the neopixels.\"\"\"\n        ...\n\n    def __setitem__(self, key: int, value: Tuple[int, ...]) -> None:\n        \"\"\"Set a pixel colour. (setitem)\n\nExample: ``np[0] = (255, 0, 0)``\n\n:param key: (key) The pixel number.\n:param value: (value) The colour.\"\"\"\n\n    def __getitem__(self, key: int) -> Tuple[int, ...]:\n        \"\"\"Get a pixel colour. (getitem)\n\nExample: ``r, g, b = np[0]``\n\n:param key: (key) The pixel number.\n:return: The colour tuple.\"\"\"\n\n    def __len__(self) -> int:\n        \"\"\"Get length of this pixel strip. (len)\n\nExample: ``len(np)``\"\"\"",
    "/typeshed/stdlib/os.pyi": "\"\"\"Access the file system. (os)\"\"\"\nfrom typing import Tuple\nfrom typing import List\n\ndef listdir() -> List[str]:\n    \"\"\"List files. (listdir)\n\nExample: ``os.listdir()``\n\n:return: A list of the names of all the files contained within the local\npersistent on-device file system.\"\"\"\n    ...\n\ndef remove(filename: str) -> None:\n    \"\"\"Remove (delete) a file. (remove)\n\nExample: ``os.remove('data.txt')``\n\n:param filename: (filename) The file to delete.\n\nIf the file does not exist an ``OSError`` exception will occur.\"\"\"\n    ...\n\ndef size(filename: str) -> int:\n    \"\"\"Returns the size of a file. (size)\n\nExample: ``os.size('data.txt')``\n\n:param filename: (filename) The file\n:return: The size in bytes.\n\nIf the file does not exist an ``OSError`` exception will occur.\"\"\"\n\nclass uname_result(Tuple[str, str, str, str, str]):\n    \"\"\"Result of ``os.uname()`` (uname result)\"\"\"\n    sysname: str\n    \"\"\"Operating system name. (sysname)\"\"\"\n    nodename: str\n    \"\"\"Name of machine on network (implementation-defined). (nodename)\"\"\"\n    release: str\n    \"\"\"Operating system release. (release)\"\"\"\n    version: str\n    \"\"\"Operating system version. (version)\"\"\"\n    machine: str\n    \"\"\"Hardware identifier. (machine)\"\"\"\n\ndef uname() -> uname_result:\n    \"\"\"Returns information identifying the current operating system. (uname)\n\nExample: ``os.uname()``\n\nThe return value is an object with five attributes:\n\n- ``sysname`` - operating system name\n- ``nodename`` - name of machine on network (implementation-defined)\n- ``release`` - operating system release\n- ``version`` - operating system version\n- ``machine`` - hardware identifier\n\nThere is no underlying operating system in MicroPython. As a result the\ninformation returned by the ``uname`` function is mostly useful for\nversioning details.\"\"\"\n    ...",
    "/typeshed/stdlib/radio.pyi": "\"\"\"Communicate between micro:bits with the built-in radio. (radio)\"\"\"\nfrom _typeshed import WriteableBuffer\nfrom typing import Optional, Tuple\nRATE_1MBIT: int\n\"\"\"Constant used to indicate a throughput of 1 MBit a second. (rate 1mbit)\"\"\"\nRATE_2MBIT: int\n\"\"\"Constant used to indicate a throughput of 2 MBit a second. (rate 2mbit)\"\"\"\n\ndef on() -> None:\n    \"\"\"Turns the radio on. (on)\n\nExample: ``radio.on()``\n\nThis needs to be explicitly called since the radio draws power and takes\nup memory that you may otherwise need.\"\"\"\n    ...\n\ndef off() -> None:\n    \"\"\"Turns off the radio, saving power and memory. (off)\n\nExample: ``radio.off()``\"\"\"\n    ...\n\ndef config(length: int=32, queue: int=3, channel: int=7, power: int=6, address: int=1969383796, group: int=0, data_rate: int=RATE_1MBIT) -> None:\n    \"\"\"Configures the radio. (config)\n\nExample: ``radio.config(group=42)``\n\nThe default configuration is suitable for most use.\n\n:param length: (length) (default=32) defines the maximum length, in bytes, of a message sent via the radio.\nIt can be up to 251 bytes long (254 - 3 bytes for S0, LENGTH and S1 preamble).\n:param queue: (queue) (default=3) specifies the number of messages that can be stored on the incoming message queue.\nIf there are no spaces left on the queue for incoming messages, then the incoming message is dropped.\n:param channel: (channel) (default=7) an integer value from 0 to 83 (inclusive) that defines an arbitrary \"channel\" to which the radio is tuned.\nMessages will be sent via this channel and only messages received via this channel will be put onto the incoming message queue. Each step is 1MHz wide, based at 2400MHz.\n:param power: (power) (default=6) is an integer value from 0 to 7 (inclusive) to indicate the strength of signal used when broadcasting a message.\nThe higher the value the stronger the signal, but the more power is consumed by the device. The numbering translates to positions in the following list of dBm (decibel milliwatt) values: -30, -20, -16, -12, -8, -4, 0, 4.\n:param address: (address) (default=0x75626974) an arbitrary name, expressed as a 32-bit address, that's used to filter incoming packets at the hardware level, keeping only those that match the address you set.\nThe default used by other micro:bit related platforms is the default setting used here.\n:param group: (group) (default=0) an 8-bit value (0-255) used with the ``address`` when filtering messages.\nConceptually, \"address\" is like a house/office address and \"group\" is like the person at that address to which you want to send your message.\n:param data_rate: (data rate) (default=``radio.RATE_1MBIT``) indicates the speed at which data throughput takes place.\nCan be one of the following constants defined in the ``radio`` module: ``RATE_250KBIT``, ``RATE_1MBIT`` or ``RATE_2MBIT``.\n\nIf ``config`` is not called then the defaults described above are assumed.\"\"\"\n    ...\n\ndef reset() -> None:\n    \"\"\"Reset the settings to their default values. (reset)\n\nExample: ``radio.reset()``\n\nThe defaults as as per the ``config`` function above.\"\"\"\n    ...\n\ndef send_bytes(message: bytes) -> None:\n    \"\"\"Sends a message containing bytes. (send bytes)\n\nExample: ``radio.send_bytes(b'hello')``\n\n:param message: (message) The bytes to send.\"\"\"\n    ...\n\ndef receive_bytes() -> Optional[bytes]:\n    \"\"\"Receive the next incoming message on the message queue. (receive bytes)\n\nExample: ``radio.receive_bytes()``\n\n:return: The message bytes if any, otherwise ``None``.\"\"\"\n    ...\n\ndef receive_bytes_into(buffer: WriteableBuffer) -> Optional[int]:\n    \"\"\"Copy the next incoming message on the message queue into a buffer. (receive bytes into)\n\nExample: ``radio.receive_bytes_info(buffer)``\n\n:param buffer: (buffer) The target buffer. The message is truncated if larger than the buffer.\n:return: ``None`` if there are no pending messages, otherwise it returns the length of the message (which might be more than the length of the buffer).\"\"\"\n    ...\n\ndef send(message: str) -> None:\n    \"\"\"Sends a message string. (send)\n\nExample: ``radio.send('hello')``\n\nThis is the equivalent of ``radio.send_bytes(bytes(message, 'utf8'))`` but with ``b'\\x01\\x00\\x01'``\nprepended to the front (to make it compatible with other platforms that target the micro:bit).\n\n:param message: (message) The string to send.\"\"\"\n    ...\n\ndef receive() -> Optional[str]:\n    \"\"\"Works in exactly the same way as ``receive_bytes`` but returns whatever was sent. (receive)\n\nExample: ``radio.receive()``\n\nEquivalent to ``str(receive_bytes(), 'utf8')`` but with a check that the the first\nthree bytes are ``b'\\x01\\x00\\x01'`` (to make it compatible with other platforms that\nmay target the micro:bit).\n\n:return: The message with the prepended bytes stripped and converted to a string.\n\nA ``ValueError`` exception is raised if conversion to string fails.\"\"\"\n    ...\n\ndef receive_full() -> Optional[Tuple[bytes, int, int]]:\n    \"\"\"Returns a tuple containing three values representing the next incoming message on the message queue. (receive full)\n\nExample: ``radio.receive_full()``\n\nIf there are no pending messages then ``None`` is returned.\n\nThe three values in the tuple represent:\n\n- the next incoming message on the message queue as bytes.\n- the RSSI (signal strength): a value between 0 (strongest) and -255 (weakest) as measured in dBm.\n- a microsecond timestamp: the value returned by ``time.ticks_us()`` when the message was received.\n\nFor example::\n\n    details = radio.receive_full()\n    if details:\n        msg, rssi, timestamp = details\n\nThis function is useful for providing information needed for triangulation\nand/or trilateration with other micro:bit devices.\n\n:return: ``None`` if there is no message, otherwise a tuple of length three with the bytes, strength and timestamp values.\"\"\"\n    ...",
    "/typeshed/stdlib/random.pyi": "\"\"\"Generate random numbers. (random)\"\"\"\nfrom typing import TypeVar, Sequence, Union, overload\n\ndef getrandbits(n: int) -> int:\n    \"\"\"Generate an integer with ``n`` random bits. (getrandbits)\n\nExample: ``urandom.getrandbits(1)``\n\n:param n: (n) A value between 1-30 (inclusive).\"\"\"\n    ...\n\ndef seed(n: int) -> None:\n    \"\"\"Initialize the random number generator. (seed)\n\nExample: ``urandom.seed(0)``\n\n:param n: (n) The integer seed\n\nThis will give you reproducibly deterministic randomness from a given starting\nstate (``n``).\"\"\"\n    ...\n\ndef randint(a: int, b: int) -> int:\n    \"\"\"Choose a random integer between ``a`` and ``b`` inclusive. (randint)\n\nExample: ``urandom.randint(0, 9)``\n\n:param a: (a) Start value for the range (inclusive)\n:param b: (b) End value for the range (inclusive)\n\nAlias for ``randrange(a, b + 1)``.\"\"\"\n    ...\n\n@overload\ndef randrange(stop: int) -> int:\n    \"\"\"Choose a randomly selected integer between zero and up to (but not\nincluding) ``stop``. (randrange)\n\nExample: ``urandom.randrange(10)``\n\n:param stop: (stop) End value for the range (exclusive)\"\"\"\n    ...\n\n@overload\ndef randrange(start: int, stop: int, step: int=1) -> int:\n    \"\"\"Choose a randomly selected element from ``range(start, stop, step)``. (randrange)\n\nExample: ``urandom.randrange(0, 10)``\n\n:param start: (start) The start of the range (inclusive)\n:param stop: (stop) The end of the range (exclusive)\n:param step: (step) The step.\"\"\"\n    ...\n_T = TypeVar('_T')\n\ndef choice(seq: Sequence[_T]) -> _T:\n    \"\"\"Choose a random element from the non-empty sequence ``seq``. (choice)\n\nExample: ``urandom.choice([Image.HAPPY, Image.SAD])``\n\n:param seq: (seq) A sequence.\n\nIf ``seq`` is  empty, raises ``IndexError``.\"\"\"\n    ...\n\ndef random() -> float:\n    \"\"\"Generate a random floating point number in the range [0.0, 1.0). (random)\n\nExample: ``urandom.random()``\n\n:return: The random floating point number\"\"\"\n    ...\n\ndef uniform(a: float, b: float) -> float:\n    \"\"\"Return a random floating point number between ``a`` and ``b`` inclusive. (uniform)\n\nExample: ``urandom.uniform(0, 9)``\n\n:param a: (a) Start value for the range (inclusive)\n:param b: (b) End value for the range (inclusive)\"\"\"\n    ...",
    "/typeshed/stdlib/speech.pyi": "\"\"\"Make the micro:bit talk, sing and make other speech like sounds. (speech)\"\"\"\nfrom typing import Optional\nfrom .microbit import MicroBitDigitalPin, pin0\n\ndef translate(words: str) -> str:\n    \"\"\"Translate English words to phonemes. (translate)\n\nExample: ``speech.translate('hello world')``\n\n:param words: (words) A string of English words.\n:return: A string containing a best guess at the appropriate phonemes to pronounce.\nThe output is generated from this `text to phoneme translation table <https://github.com/s-macke/SAM/wiki/Text-to-phoneme-translation-table>`_.\n\nThis function should be used to generate a first approximation of phonemes\nthat can be further hand-edited to improve accuracy, inflection and\nemphasis.\n\nSee `the online documentation <https://microbit-micropython.readthedocs.io/en/v2-docs/speech.html>`_ for detailed information.\"\"\"\n    ...\n\ndef pronounce(phonemes: str, pitch: int=64, speed: int=72, mouth: int=128, throat: int=128, pin: Optional[MicroBitDigitalPin]=pin0) -> None:\n    \"\"\"Pronounce phonemes. (pronounce)\n\nExample: ``speech.pronounce(' /HEHLOW WERLD')``\n\n:param phonemes: (phonemes) The string of phonemes to pronounce\n:param pitch: (pitch) A number representing the pitch of the voice\n:param speed: (speed) A number representing the speed of the voice\n:param mouth: (mouth) A number representing the mouth of the voice\n:param throat: (throat) A number representing the throat of the voice\n:param pin: (pin) Optional argument to specify the output pin can be used to override the default of ``pin0``.\nIf we do not want any sound to play out of the pins can use ``pin=None``. micro:bit V2 only.\n\nOverride the optional pitch, speed, mouth and throat settings to change the\ntimbre (quality) of the voice.\n\nSee `the online documentation <https://microbit-micropython.readthedocs.io/en/v2-docs/speech.html>`_ for detailed information.\"\"\"\n    ...\n\ndef say(words: str, pitch: int=64, speed: int=72, mouth: int=128, throat: int=128, pin: MicroBitDigitalPin=pin0) -> None:\n    \"\"\"Say English words. (say)\n\nExample: ``speech.say('hello world')``\n\n:param words: (words) The string of words to say.\n:param pitch: (pitch) A number representing the pitch of the voice\n:param speed: (speed) A number representing the speed of the voice\n:param mouth: (mouth) A number representing the mouth of the voice\n:param throat: (throat) A number representing the throat of the voice\n:param pin: (pin) Optional argument to specify the output pin can be used to override the default of ``pin0``.\nIf we do not want any sound to play out of the pins can use ``pin=None``. micro:bit V2 only.\n\nThe result is semi-accurate for English. Override the optional pitch, speed,\nmouth and throat settings to change the timbre (quality) of the voice.\n\nThis is a short-hand equivalent of:\n``speech.pronounce(speech.translate(words))``\n\nSee `the online documentation <https://microbit-micropython.readthedocs.io/en/v2-docs/speech.html>`_ for detailed information.\"\"\"\n    ...\n\ndef sing(phonemes: str, pitch: int=64, speed: int=72, mouth: int=128, throat: int=128, pin: MicroBitDigitalPin=pin0) -> None:\n    \"\"\"Sing phonemes. (sing)\n\nExample: ``speech.sing(' /HEHLOW WERLD')``\n\n:param phonemes: (phonemes) The string of words to sing.\n:param pitch: (pitch) A number representing the pitch of the voice\n:param speed: (speed) A number representing the speed of the voice\n:param mouth: (mouth) A number representing the mouth of the voice\n:param throat: (throat) A number representing the throat of the voice\n:param pin: (pin) Optional argument to specify the output pin can be used to override the default of ``pin0``.\nIf we do not want any sound to play out of the pins can use ``pin=None``. micro:bit V2 only.\n\nOverride the optional pitch, speed, mouth and throat settings to change\nthe timbre (quality) of the voice.\n\nSee `the online documentation <https://microbit-micropython.readthedocs.io/en/v2-docs/speech.html>`_ for detailed information.\"\"\"\n    ...",
    "/typeshed/stdlib/struct.pyi": "\"\"\"Pack and unpack primitive data types. (struct)\"\"\"\nfrom _typeshed import ReadableBuffer, WriteableBuffer\nfrom typing import Any, Tuple, Union\n\ndef calcsize(fmt: str) -> int:\n    \"\"\"Get the number of bytes needed to store the given ``fmt``. (calcsize)\n\nExample: ``ustruct.calcsize('hf')``\n\n:param fmt: (fmt) A format string.\n:return The number of bytes needed to store such a value.\"\"\"\n    ...\n\ndef pack(fmt: str, v1: Any, *vn: Any) -> bytes:\n    \"\"\"Pack values according to a format string. (pack)\n\nExample: ``ustruct.pack('hf', 1, 3.1415)``\n\n:param fmt: (fmt) The format string.\n:param v1: (v1) The first value.\n:param *vn: (*vn) The remaining values.\n:return A bytes object encoding the values.\"\"\"\n    ...\n\ndef pack_into(fmt: str, buffer: WriteableBuffer, offset: int, v1: Any, *vn: Any) -> None:\n    \"\"\"Pack values according to a format string. (pack into)\n\nExample: ``ustruct.pack_info('hf', buffer, 1, 3.1415)``\n\n:param fmt: (fmt) The format string.\n:param buffer: (buffer) The target buffer to write into.\n:param offset: (offset) The offset into the buffer. May be negative to count from the end of the buffer.\n:param v1: (v1) The first value.\n:param *vn: (*vn) The remaining values.\"\"\"\n    ...\n\ndef unpack(fmt: str, data: ReadableBuffer) -> Tuple[Any, ...]:\n    \"\"\"Unpack data according to a format string. (unpack)\n\nExample: ``v1, v2 = ustruct.unpack('hf', buffer)``\n\n:param fmt: (fmt) The format string.\n:param data: (data) The data.\n:return: A tuple of the unpacked values.\"\"\"\n    ...\n\ndef unpack_from(fmt: str, buffer: ReadableBuffer, offset: int=0) -> Tuple:\n    \"\"\"Unpack data from a buffer according to a format string. (unpack from)\n\nExample: ``v1, v2 = ustruct.unpack_from('hf', buffer)``\n\n:param fmt: (fmt) The format string.\n:param buffer: (buffer) The source buffer to read from.\n:param offset: (offset) The offset into the buffer. May be negative to count from the end of the buffer.\n:return: A tuple of the unpacked values.\"\"\"\n    ...",
    "/typeshed/stdlib/sys.pyi": "\"\"\"System specific functions (sys)\"\"\"\nfrom typing import Any, Dict, List, NoReturn, TextIO, Tuple\n\ndef exit(retval: object=...) -> NoReturn:\n    \"\"\"Terminate current program with a given exit code. (exit)\n\nExample: ``sys.exit(1)``\n\nThis function raises a `SystemExit` exception. If an argument is given, its\nvalue given as an argument to `SystemExit`.\n\n:param retval: (retval) The exit code or message.\"\"\"\n    ...\n\ndef print_exception(exc: Exception) -> None:\n    \"\"\"Print an exception with a traceback. (print exception)\n\nExample: ``sys.print_exception(e)``\n\n:param exc: (exc) The exception to print\n\nThis is simplified version of a function which appears in the\n``traceback`` module in CPython.\"\"\"\nargv: List[str]\n\"\"\"A mutable list of arguments the current program was started with. (argv)\"\"\"\nbyteorder: str\n\"\"\"The byte order of the system (``\"little\"`` or ``\"big\"``). (byteorder)\"\"\"\n\nclass _implementation:\n    name: str\n    version: Tuple[int, int, int]\nimplementation: _implementation\n\"\"\"Object with information about the current Python implementation. (implementation)\n\nFor MicroPython, it has following attributes:\n\n- ``name`` - string \"micropython\"\n- ``version`` - tuple (major, minor, micro), e.g. (1, 7, 0)\n\nThis object is the recommended way to distinguish MicroPython from other\nPython implementations (note that it still may not exist in the very\nminimal ports).\n\nCPython mandates more attributes for this object, but the actual useful\nbare minimum is implemented in MicroPython.\n\"\"\"\nmaxsize: int\n\"\"\"\nMaximum value which a native integer type can hold on the current platform,\nor maximum value representable by MicroPython integer type, if it's smaller\nthan platform max value (that is the case for MicroPython ports without\nlong int support). (maxsize)\n\nThis attribute is useful for detecting \"bitness\" of a platform (32-bit vs\n64-bit, etc.). It's recommended to not compare this attribute to some\nvalue directly, but instead count number of bits in it::\n\n    bits = 0\n    v = sys.maxsize\n    while v:\n        bits += 1\n        v >>= 1\n    if bits > 32:\n        # 64-bit (or more) platform\n        ...\n    else:\n        # 32-bit (or less) platform\n        # Note that on 32-bit platform, value of bits may be less than 32\n        # (e.g. 31) due to peculiarities described above, so use \"> 16\",\n        # \"> 32\", \"> 64\" style of comparisons.\n\"\"\"\nmodules: Dict[str, Any]\n\"\"\"Dictionary of loaded modules.  (modules)\n\nOn some ports, it may not include builtin modules.\"\"\"\npath: List[str]\n\"\"\"A mutable list of directories to search for imported modules. (path)\"\"\"\nplatform: str\n\"\"\"The platform that MicroPython is running on.  (platform)\n\nFor OS/RTOS ports, this is usually an identifier of the OS, e.g. ``\"linux\"``.\nFor baremetal ports it is an identifier of a board, e.g. ``\"pyboard\"`` for \nthe original MicroPython reference board. It thus can be used to\ndistinguish one board from another.\n\nIf you need to check whether your program runs on MicroPython (vs other\nPython implementation), use `sys.implementation` instead.\n\"\"\"\nversion: str\n\"\"\"Python language version that this implementation conforms to, as a string. (version)\"\"\"\nversion_info: Tuple[int, int, int]\n\"\"\"Python language version that this implementation conforms to, as a tuple of ints. (version info)\n\nOnly the first three version numbers (major, minor, micro) are supported and\nthey can be referenced only by index, not by name.\n\"\"\"",
    "/typeshed/stdlib/this.pyi": "def authors() -> str:\n    ...",
    "/typeshed/stdlib/time.pyi": "\"\"\"Measure time and add delays to programs. (time)\"\"\"\nfrom typing import Union\n\ndef sleep(seconds: Union[int, float]) -> None:\n    \"\"\"Delay a number of seconds. (sleep)\n\nExample: ``utime.sleep(1)``\n\n:param seconds: (seconds) The number of seconds to sleep for.\nUse a floating-point number to sleep for a fractional number of seconds.\"\"\"\n    ...\n\ndef sleep_ms(ms: int) -> None:\n    \"\"\"Delay for given number of milliseconds. (sleep ms)\n\nExample: ``utime.sleep_ms(1_000_000)``\n\n:param ms: (ms) The number of milliseconds delay (>= 0).\"\"\"\n    ...\n\ndef sleep_us(us: int) -> None:\n    \"\"\"Delay for given number of microseconds. (sleep us)\n\nExample: ``utime.sleep_us(1000)``\n\n:param us: (us) The number of microseconds delay (>= 0).\"\"\"\n    ...\n\ndef ticks_ms() -> int:\n    \"\"\"Get an increasing, millisecond counter with an arbitrary reference point,\nthat wraps around after some value. (ticks ms)\n\nExample: ``utime.ticks_ms()``\n\n:return: The counter value in milliseconds.\"\"\"\n    ...\n\ndef ticks_us() -> int:\n    \"\"\"Get an increasing, microsecond counter with an arbitrary reference point,\nthat wraps around after some value. (ticks us)\n\nExample: ``utime.ticks_us()``\n\n:return: The counter value in microseconds.\"\"\"\n    ...\n\ndef ticks_add(ticks: int, delta: int) -> int:\n    \"\"\"Offset ticks value by a given number, which can be either positive or\nnegative. (ticks add)\n\nExample: ``utime.ticks_add(utime.ticks_ms(), 200)``\n\nGiven a ticks value, this function allows to calculate ticks\nvalue delta ticks before or after it, following modular-arithmetic\ndefinition of tick values.\n\n:param ticks: (ticks) A ticks value\n:param delta: (delta) An integer offset\n\nExample::\n\n    # Find out what ticks value there was 100ms ago\n    print(ticks_add(time.ticks_ms(), -100))\n\n    # Calculate deadline for operation and test for it\n    deadline = ticks_add(time.ticks_ms(), 200)\n    while ticks_diff(deadline, time.ticks_ms()) > 0:\n        do_a_little_of_something()\n\n    # Find out TICKS_MAX used by this port\n    print(ticks_add(0, -1))\"\"\"\n    ...\n\ndef ticks_diff(ticks1: int, ticks2: int) -> int:\n    \"\"\"Measure ticks difference between values returned from\n``utime.ticks_ms()`` or ``ticks_us()``, as a signed value\nwhich may wrap around. (ticks diff)\n\nExample: ``utime.ticks_diff(scheduled_time, now)``\n\n:param ticks1: (ticks1) (ticks2) The value to subtract from\n:param ticks2: (ticks2) The value to subtract\n\nThe argument order is the same as for subtraction operator,\n``ticks_diff(ticks1, ticks2)`` has the same meaning as ``ticks1 - ticks2``.\n\n``ticks_diff()`` is designed to accommodate various usage\npatterns, among them:\n\nPolling with timeout. In this case, the order of events is known, and you\nwill deal only with positive results of :func:`utime.ticks_diff()`::\n\n    # Wait for GPIO pin to be asserted, but at most 500us\n    start = time.ticks_us()\n    while pin.value() == 0:\n        if time.ticks_diff(time.ticks_us(), start) > 500:\n            raise TimeoutError\n\n\nScheduling events. In this case, :func:`utime.ticks_diff()` result may be\nnegative if an event is overdue::\n\n    # This code snippet is not optimized\n    now = time.ticks_ms()\n    scheduled_time = task.scheduled_time()\n    if ticks_diff(scheduled_time, now) > 0:\n        print(\"Too early, let's nap\")\n        sleep_ms(ticks_diff(scheduled_time, now))\n        task.run()\n    elif ticks_diff(scheduled_time, now) == 0:\n        print(\"Right at time!\")\n        task.run()\n    elif ticks_diff(scheduled_time, now) < 0:\n        print(\"Oops, running late, tell task to run faster!\")\n        task.run(run_faster=true)\"\"\"\n    ...",
    "/typeshed/stdlib/types.pyi": "import sys\nfrom typing import Any, AsyncGenerator, Awaitable, Callable, Generator, Generic, ItemsView, Iterable, Iterator, KeysView, Mapping, Tuple, Type, TypeVar, ValuesView, overload\nfrom typing_extensions import Literal, final\n_T = TypeVar('_T')\n_T1 = TypeVar('_T1')\n_T2 = TypeVar('_T2')\n_T_co = TypeVar('_T_co', covariant=True)\n_T_contra = TypeVar('_T_contra', contravariant=True)\n_KT = TypeVar('_KT')\n_VT_co = TypeVar('_VT_co', covariant=True)\n_V_co = TypeVar('_V_co', covariant=True)\n\n@final\nclass _Cell:\n    __hash__: None\n    cell_contents: Any\n\n@final\nclass FunctionType:\n    __closure__: Tuple[_Cell, ...] | None\n    __code__: CodeType\n    __defaults__: Tuple[Any, ...] | None\n    __dict__: dict[str, Any]\n    __globals__: dict[str, Any]\n    __name__: str\n    __qualname__: str\n    __annotations__: dict[str, Any]\n    __kwdefaults__: dict[str, Any]\n\n    def __init__(self, code: CodeType, globals: dict[str, Any], name: str | None=..., argdefs: Tuple[object, ...] | None=..., closure: Tuple[_Cell, ...] | None=...) -> None:\n        ...\n\n    def __call__(self, *args: Any, **kwargs: Any) -> Any:\n        ...\n\n    def __get__(self, obj: object | None, type: type | None) -> MethodType:\n        ...\nLambdaType = FunctionType\n\n@final\nclass CodeType:\n    \"\"\"Create a code object.  Not for the faint of heart. (codetype)\"\"\"\n    co_argcount: int\n    if sys.version_info >= (3, 8):\n        co_posonlyargcount: int\n    co_kwonlyargcount: int\n    co_nlocals: int\n    co_stacksize: int\n    co_flags: int\n    co_code: bytes\n    co_consts: Tuple[Any, ...]\n    co_names: Tuple[str, ...]\n    co_varnames: Tuple[str, ...]\n    co_filename: str\n    co_name: str\n    co_firstlineno: int\n    co_lnotab: bytes\n    co_freevars: Tuple[str, ...]\n    co_cellvars: Tuple[str, ...]\n    if sys.version_info >= (3, 8):\n\n        def __init__(self, argcount: int, posonlyargcount: int, kwonlyargcount: int, nlocals: int, stacksize: int, flags: int, codestring: bytes, constants: Tuple[Any, ...], names: Tuple[str, ...], varnames: Tuple[str, ...], filename: str, name: str, firstlineno: int, lnotab: bytes, freevars: Tuple[str, ...]=..., cellvars: Tuple[str, ...]=...) -> None:\n            ...\n    else:\n\n        def __init__(self, argcount: int, kwonlyargcount: int, nlocals: int, stacksize: int, flags: int, codestring: bytes, constants: Tuple[Any, ...], names: Tuple[str, ...], varnames: Tuple[str, ...], filename: str, name: str, firstlineno: int, lnotab: bytes, freevars: Tuple[str, ...]=..., cellvars: Tuple[str, ...]=...) -> None:\n            ...\n    if sys.version_info >= (3, 8):\n\n        def replace(self, *, co_argcount: int=..., co_posonlyargcount: int=..., co_kwonlyargcount: int=..., co_nlocals: int=..., co_stacksize: int=..., co_flags: int=..., co_firstlineno: int=..., co_code: bytes=..., co_consts: Tuple[Any, ...]=..., co_names: Tuple[str, ...]=..., co_varnames: Tuple[str, ...]=..., co_freevars: Tuple[str, ...]=..., co_cellvars: Tuple[str, ...]=..., co_filename: str=..., co_name: str=..., co_lnotab: bytes=...) -> CodeType:\n            ...\n\n@final\nclass MappingProxyType(Mapping[_KT, _VT_co], Generic[_KT, _VT_co]):\n    __hash__: None\n\n    def __init__(self, mapping: Mapping[_KT, _VT_co]) -> None:\n        ...\n\n    def __getitem__(self, k: _KT) -> _VT_co:\n        ...\n\n    def __iter__(self) -> Iterator[_KT]:\n        ...\n\n    def __len__(self) -> int:\n        ...\n\n    def copy(self) -> dict[_KT, _VT_co]:\n        ...\n\n    def keys(self) -> KeysView[_KT]:\n        ...\n\n    def values(self) -> ValuesView[_VT_co]:\n        ...\n\n    def items(self) -> ItemsView[_KT, _VT_co]:\n        ...\n    if sys.version_info >= (3, 9):\n\n        def __class_getitem__(cls, item: Any) -> GenericAlias:\n            ...\n\n        def __reversed__(self) -> Iterator[_KT]:\n            ...\n\n        def __or__(self, __value: Mapping[_T1, _T2]) -> dict[_KT | _T1, _VT_co | _T2]:\n            ...\n\n        def __ror__(self, __value: Mapping[_T1, _T2]) -> dict[_KT | _T1, _VT_co | _T2]:\n            ...\n\nclass SimpleNamespace:\n    __hash__: None\n\n    def __init__(self, **kwargs: Any) -> None:\n        ...\n\n    def __getattribute__(self, name: str) -> Any:\n        ...\n\n    def __setattr__(self, name: str, value: Any) -> None:\n        ...\n\n    def __delattr__(self, name: str) -> None:\n        ...\n\nclass ModuleType:\n    __name__: str\n    __file__: str\n    __dict__: dict[str, Any]\n    __package__: str | None\n\n    def __init__(self, name: str, doc: str | None=...) -> None:\n        ...\n\n@final\nclass GeneratorType(Generator[_T_co, _T_contra, _V_co]):\n    gi_code: CodeType\n    gi_frame: FrameType\n    gi_running: bool\n    gi_yieldfrom: GeneratorType[_T_co, _T_contra, Any] | None\n\n    def __iter__(self) -> GeneratorType[_T_co, _T_contra, _V_co]:\n        ...\n\n    def __next__(self) -> _T_co:\n        ...\n\n    def close(self) -> None:\n        ...\n\n    def send(self, __arg: _T_contra) -> _T_co:\n        ...\n\n    @overload\n    def throw(self, __typ: Type[BaseException], __val: BaseException | object=..., __tb: TracebackType | None=...) -> _T_co:\n        ...\n\n    @overload\n    def throw(self, __typ: BaseException, __val: None=..., __tb: TracebackType | None=...) -> _T_co:\n        ...\n\n@final\nclass AsyncGeneratorType(AsyncGenerator[_T_co, _T_contra]):\n    ag_await: Awaitable[Any] | None\n    ag_frame: FrameType\n    ag_running: bool\n    ag_code: CodeType\n\n    def __aiter__(self) -> AsyncGeneratorType[_T_co, _T_contra]:\n        ...\n\n    def __anext__(self) -> Awaitable[_T_co]:\n        ...\n\n    def asend(self, __val: _T_contra) -> Awaitable[_T_co]:\n        ...\n\n    @overload\n    def athrow(self, __typ: Type[BaseException], __val: BaseException | object=..., __tb: TracebackType | None=...) -> Awaitable[_T_co]:\n        ...\n\n    @overload\n    def athrow(self, __typ: BaseException, __val: None=..., __tb: TracebackType | None=...) -> Awaitable[_T_co]:\n        ...\n\n    def aclose(self) -> Awaitable[None]:\n        ...\n\n@final\nclass CoroutineType:\n    cr_await: Any | None\n    cr_code: CodeType\n    cr_frame: FrameType\n    cr_running: bool\n\n    def close(self) -> None:\n        ...\n\n    def send(self, __arg: Any) -> Any:\n        ...\n\n    @overload\n    def throw(self, __typ: Type[BaseException], __val: BaseException | object=..., __tb: TracebackType | None=...) -> Any:\n        ...\n\n    @overload\n    def throw(self, __typ: BaseException, __val: None=..., __tb: TracebackType | None=...) -> Any:\n        ...\n\nclass _StaticFunctionType:\n    \"\"\"Fictional type to correct the type of MethodType.__func__. (staticfunctiontype)\n\nFunctionType is a descriptor, so mypy follows the descriptor protocol and\nconverts MethodType.__func__ back to MethodType (the return type of\nFunctionType.__get__). But this is actually a special case; MethodType is\nimplemented in C and its attribute access doesn't go through\n__getattribute__.\n\nBy wrapping FunctionType in _StaticFunctionType, we get the right result;\nsimilar to wrapping a function in staticmethod() at runtime to prevent it\nbeing bound as a method.\"\"\"\n\n    def __get__(self, obj: object | None, type: type | None) -> FunctionType:\n        ...\n\n@final\nclass MethodType:\n    __closure__: Tuple[_Cell, ...] | None\n    __defaults__: Tuple[Any, ...] | None\n    __func__: _StaticFunctionType\n    __self__: object\n    __name__: str\n    __qualname__: str\n\n    def __init__(self, func: Callable[..., Any], obj: object) -> None:\n        ...\n\n    def __call__(self, *args: Any, **kwargs: Any) -> Any:\n        ...\n\n@final\nclass BuiltinFunctionType:\n    __self__: object | ModuleType\n    __name__: str\n    __qualname__: str\n\n    def __call__(self, *args: Any, **kwargs: Any) -> Any:\n        ...\nBuiltinMethodType = BuiltinFunctionType\nif sys.version_info >= (3, 7):\n\n    @final\n    class WrapperDescriptorType:\n        __name__: str\n        __qualname__: str\n        __objclass__: type\n\n        def __call__(self, *args: Any, **kwargs: Any) -> Any:\n            ...\n\n        def __get__(self, obj: Any, type: type=...) -> Any:\n            ...\n\n    @final\n    class MethodWrapperType:\n        __self__: object\n        __name__: str\n        __qualname__: str\n        __objclass__: type\n\n        def __call__(self, *args: Any, **kwargs: Any) -> Any:\n            ...\n\n        def __eq__(self, other: Any) -> bool:\n            ...\n\n        def __ne__(self, other: Any) -> bool:\n            ...\n\n    @final\n    class MethodDescriptorType:\n        __name__: str\n        __qualname__: str\n        __objclass__: type\n\n        def __call__(self, *args: Any, **kwargs: Any) -> Any:\n            ...\n\n        def __get__(self, obj: Any, type: type=...) -> Any:\n            ...\n\n    @final\n    class ClassMethodDescriptorType:\n        __name__: str\n        __qualname__: str\n        __objclass__: type\n\n        def __call__(self, *args: Any, **kwargs: Any) -> Any:\n            ...\n\n        def __get__(self, obj: Any, type: type=...) -> Any:\n            ...\n\n@final\nclass TracebackType:\n    if sys.version_info >= (3, 7):\n\n        def __init__(self, tb_next: TracebackType | None, tb_frame: FrameType, tb_lasti: int, tb_lineno: int) -> None:\n            ...\n        tb_next: TracebackType | None\n    else:\n\n        @property\n        def tb_next(self) -> TracebackType | None:\n            ...\n\n    @property\n    def tb_frame(self) -> FrameType:\n        ...\n\n    @property\n    def tb_lasti(self) -> int:\n        ...\n\n    @property\n    def tb_lineno(self) -> int:\n        ...\n\n@final\nclass FrameType:\n    f_back: FrameType | None\n    f_builtins: dict[str, Any]\n    f_code: CodeType\n    f_globals: dict[str, Any]\n    f_lasti: int\n    f_lineno: int\n    f_locals: dict[str, Any]\n    f_trace: Callable[[FrameType, str, Any], Any] | None\n    if sys.version_info >= (3, 7):\n        f_trace_lines: bool\n        f_trace_opcodes: bool\n\n    def clear(self) -> None:\n        ...\n\n@final\nclass GetSetDescriptorType:\n    __name__: str\n    __objclass__: type\n\n    def __get__(self, __obj: Any, __type: type=...) -> Any:\n        ...\n\n    def __set__(self, __instance: Any, __value: Any) -> None:\n        ...\n\n    def __delete__(self, obj: Any) -> None:\n        ...\n\n@final\nclass MemberDescriptorType:\n    __name__: str\n    __objclass__: type\n\n    def __get__(self, __obj: Any, __type: type=...) -> Any:\n        ...\n\n    def __set__(self, __instance: Any, __value: Any) -> None:\n        ...\n\n    def __delete__(self, obj: Any) -> None:\n        ...\nif sys.version_info >= (3, 7):\n\n    def new_class(name: str, bases: Iterable[object]=..., kwds: dict[str, Any] | None=..., exec_body: Callable[[dict[str, Any]], None] | None=...) -> type:\n        ...\n\n    def resolve_bases(bases: Iterable[object]) -> Tuple[Any, ...]:\n        ...\nelse:\n\n    def new_class(name: str, bases: Tuple[type, ...]=..., kwds: dict[str, Any] | None=..., exec_body: Callable[[dict[str, Any]], None] | None=...) -> type:\n        ...\n\ndef prepare_class(name: str, bases: Tuple[type, ...]=..., kwds: dict[str, Any] | None=...) -> Tuple[type, dict[str, Any], dict[str, Any]]:\n    ...\nDynamicClassAttribute = property\n\ndef coroutine(func: Callable[..., Any]) -> CoroutineType:\n    ...\nif sys.version_info >= (3, 8):\n    CellType = _Cell\nif sys.version_info >= (3, 9):\n\n    class GenericAlias:\n        __origin__: type\n        __args__: Tuple[Any, ...]\n        __parameters__: Tuple[Any, ...]\n\n        def __init__(self, origin: type, args: Any) -> None:\n            ...\n\n        def __getattr__(self, name: str) -> Any:\n            ...\nif sys.version_info >= (3, 10):\n\n    @final\n    class NoneType:\n\n        def __bool__(self) -> Literal[False]:\n            ...\n    EllipsisType = ellipsis\n    from builtins import _NotImplementedType\n    NotImplementedType = _NotImplementedType\n\n    @final\n    class UnionType:\n        __args__: Tuple[Any, ...]\n\n        def __or__(self, obj: Any) -> UnionType:\n            ...\n\n        def __ror__(self, obj: Any) -> UnionType:\n            ...",
    "/typeshed/stdlib/typing.pyi": "import collections\nimport sys\nfrom abc import ABCMeta, abstractmethod\nfrom types import BuiltinFunctionType, CodeType, FrameType, FunctionType, MethodType, ModuleType, TracebackType\nfrom typing_extensions import Literal as _Literal\nif sys.version_info >= (3, 7):\n    from types import MethodDescriptorType, MethodWrapperType, WrapperDescriptorType\nif sys.version_info >= (3, 9):\n    from types import GenericAlias\nAny = object()\n\nclass TypeVar:\n    __name__: str\n    __bound__: Optional[Type[Any]]\n    __constraints__: Tuple[Type[Any], ...]\n    __covariant__: bool\n    __contravariant__: bool\n\n    def __init__(self, name: str, *constraints: Type[Any], bound: Union[None, Type[Any], str]=..., covariant: bool=..., contravariant: bool=...) -> None:\n        ...\n_promote = object()\n\nclass _SpecialForm:\n\n    def __getitem__(self, typeargs: Any) -> object:\n        ...\n_F = TypeVar('_F', bound=Callable[..., Any])\n\ndef overload(func: _F) -> _F:\n    ...\nUnion: _SpecialForm = ...\nOptional: _SpecialForm = ...\nTuple: _SpecialForm = ...\nGeneric: _SpecialForm = ...\nProtocol: _SpecialForm = ...\nCallable: _SpecialForm = ...\nType: _SpecialForm = ...\nClassVar: _SpecialForm = ...\nif sys.version_info >= (3, 8):\n    Final: _SpecialForm = ...\n\n    def final(f: _F) -> _F:\n        ...\n    Literal: _SpecialForm = ...\n    TypedDict: object\nif sys.version_info < (3, 7):\n\n    class GenericMeta(type):\n        ...\nif sys.version_info >= (3, 10):\n\n    class ParamSpecArgs:\n        __origin__: ParamSpec\n\n        def __init__(self, origin: ParamSpec) -> None:\n            ...\n\n    class ParamSpecKwargs:\n        __origin__: ParamSpec\n\n        def __init__(self, origin: ParamSpec) -> None:\n            ...\n\n    class ParamSpec:\n        __name__: str\n        __bound__: Optional[Type[Any]]\n        __covariant__: bool\n        __contravariant__: bool\n\n        def __init__(self, name: str, *, bound: Union[None, Type[Any], str]=..., contravariant: bool=..., covariant: bool=...) -> None:\n            ...\n\n        @property\n        def args(self) -> ParamSpecArgs:\n            ...\n\n        @property\n        def kwargs(self) -> ParamSpecKwargs:\n            ...\n    Concatenate: _SpecialForm = ...\n    TypeAlias: _SpecialForm = ...\n    TypeGuard: _SpecialForm = ...\nNoReturn = Union[None]\n_T = TypeVar('_T')\n_S = TypeVar('_S')\n_KT = TypeVar('_KT')\n_VT = TypeVar('_VT')\n_T_co = TypeVar('_T_co', covariant=True)\n_V_co = TypeVar('_V_co', covariant=True)\n_KT_co = TypeVar('_KT_co', covariant=True)\n_VT_co = TypeVar('_VT_co', covariant=True)\n_T_contra = TypeVar('_T_contra', contravariant=True)\n_TC = TypeVar('_TC', bound=Type[object])\n\ndef no_type_check(arg: _F) -> _F:\n    ...\n\ndef no_type_check_decorator(decorator: _F) -> _F:\n    ...\n\nclass _Alias:\n\n    def __getitem__(self, typeargs: Any) -> Any:\n        ...\nList = _Alias()\nDict = _Alias()\nDefaultDict = _Alias()\nSet = _Alias()\nFrozenSet = _Alias()\nCounter = _Alias()\nDeque = _Alias()\nChainMap = _Alias()\nif sys.version_info >= (3, 7):\n    OrderedDict = _Alias()\nif sys.version_info >= (3, 9):\n    Annotated: _SpecialForm = ...\nAnyStr = TypeVar('AnyStr', str, bytes)\n\ndef runtime_checkable(cls: _TC) -> _TC:\n    ...\n\n@runtime_checkable\nclass SupportsInt(Protocol, metaclass=ABCMeta):\n\n    @abstractmethod\n    def __int__(self) -> int:\n        ...\n\n@runtime_checkable\nclass SupportsFloat(Protocol, metaclass=ABCMeta):\n\n    @abstractmethod\n    def __float__(self) -> float:\n        ...\n\n@runtime_checkable\nclass SupportsComplex(Protocol, metaclass=ABCMeta):\n\n    @abstractmethod\n    def __complex__(self) -> complex:\n        ...\n\n@runtime_checkable\nclass SupportsBytes(Protocol, metaclass=ABCMeta):\n\n    @abstractmethod\n    def __bytes__(self) -> bytes:\n        ...\nif sys.version_info >= (3, 8):\n\n    @runtime_checkable\n    class SupportsIndex(Protocol, metaclass=ABCMeta):\n\n        @abstractmethod\n        def __index__(self) -> int:\n            ...\n\n@runtime_checkable\nclass SupportsAbs(Protocol[_T_co]):\n\n    @abstractmethod\n    def __abs__(self) -> _T_co:\n        ...\n\n@runtime_checkable\nclass SupportsRound(Protocol[_T_co]):\n\n    @overload\n    @abstractmethod\n    def __round__(self) -> int:\n        ...\n\n    @overload\n    @abstractmethod\n    def __round__(self, ndigits: int) -> _T_co:\n        ...\n\n@runtime_checkable\nclass Sized(Protocol, metaclass=ABCMeta):\n\n    @abstractmethod\n    def __len__(self) -> int:\n        ...\n\n@runtime_checkable\nclass Hashable(Protocol, metaclass=ABCMeta):\n\n    @abstractmethod\n    def __hash__(self) -> int:\n        ...\n\n@runtime_checkable\nclass Iterable(Protocol[_T_co]):\n\n    @abstractmethod\n    def __iter__(self) -> Iterator[_T_co]:\n        ...\n\n@runtime_checkable\nclass Iterator(Iterable[_T_co], Protocol[_T_co]):\n\n    @abstractmethod\n    def __next__(self) -> _T_co:\n        ...\n\n    def __iter__(self) -> Iterator[_T_co]:\n        ...\n\n@runtime_checkable\nclass Reversible(Iterable[_T_co], Protocol[_T_co]):\n\n    @abstractmethod\n    def __reversed__(self) -> Iterator[_T_co]:\n        ...\n\nclass Generator(Iterator[_T_co], Generic[_T_co, _T_contra, _V_co]):\n\n    def __next__(self) -> _T_co:\n        ...\n\n    @abstractmethod\n    def send(self, __value: _T_contra) -> _T_co:\n        ...\n\n    @overload\n    @abstractmethod\n    def throw(self, __typ: Type[BaseException], __val: Union[BaseException, object]=..., __tb: Optional[TracebackType]=...) -> _T_co:\n        ...\n\n    @overload\n    @abstractmethod\n    def throw(self, __typ: BaseException, __val: None=..., __tb: Optional[TracebackType]=...) -> _T_co:\n        ...\n\n    def close(self) -> None:\n        ...\n\n    def __iter__(self) -> Generator[_T_co, _T_contra, _V_co]:\n        ...\n\n    @property\n    def gi_code(self) -> CodeType:\n        ...\n\n    @property\n    def gi_frame(self) -> FrameType:\n        ...\n\n    @property\n    def gi_running(self) -> bool:\n        ...\n\n    @property\n    def gi_yieldfrom(self) -> Optional[Generator[Any, Any, Any]]:\n        ...\n\n@runtime_checkable\nclass Awaitable(Protocol[_T_co]):\n\n    @abstractmethod\n    def __await__(self) -> Generator[Any, None, _T_co]:\n        ...\n\nclass Coroutine(Awaitable[_V_co], Generic[_T_co, _T_contra, _V_co]):\n    __name__: str\n    __qualname__: str\n\n    @property\n    def cr_await(self) -> Optional[Any]:\n        ...\n\n    @property\n    def cr_code(self) -> CodeType:\n        ...\n\n    @property\n    def cr_frame(self) -> FrameType:\n        ...\n\n    @property\n    def cr_running(self) -> bool:\n        ...\n\n    @abstractmethod\n    def send(self, __value: _T_contra) -> _T_co:\n        ...\n\n    @overload\n    @abstractmethod\n    def throw(self, __typ: Type[BaseException], __val: Union[BaseException, object]=..., __tb: Optional[TracebackType]=...) -> _T_co:\n        ...\n\n    @overload\n    @abstractmethod\n    def throw(self, __typ: BaseException, __val: None=..., __tb: Optional[TracebackType]=...) -> _T_co:\n        ...\n\n    @abstractmethod\n    def close(self) -> None:\n        ...\n\nclass AwaitableGenerator(Awaitable[_V_co], Generator[_T_co, _T_contra, _V_co], Generic[_T_co, _T_contra, _V_co, _S], metaclass=ABCMeta):\n    ...\n\n@runtime_checkable\nclass AsyncIterable(Protocol[_T_co]):\n\n    @abstractmethod\n    def __aiter__(self) -> AsyncIterator[_T_co]:\n        ...\n\n@runtime_checkable\nclass AsyncIterator(AsyncIterable[_T_co], Protocol[_T_co]):\n\n    @abstractmethod\n    def __anext__(self) -> Awaitable[_T_co]:\n        ...\n\n    def __aiter__(self) -> AsyncIterator[_T_co]:\n        ...\n\nclass AsyncGenerator(AsyncIterator[_T_co], Generic[_T_co, _T_contra]):\n\n    @abstractmethod\n    def __anext__(self) -> Awaitable[_T_co]:\n        ...\n\n    @abstractmethod\n    def asend(self, __value: _T_contra) -> Awaitable[_T_co]:\n        ...\n\n    @overload\n    @abstractmethod\n    def athrow(self, __typ: Type[BaseException], __val: Union[BaseException, object]=..., __tb: Optional[TracebackType]=...) -> Awaitable[_T_co]:\n        ...\n\n    @overload\n    @abstractmethod\n    def athrow(self, __typ: BaseException, __val: None=..., __tb: Optional[TracebackType]=...) -> Awaitable[_T_co]:\n        ...\n\n    @abstractmethod\n    def aclose(self) -> Awaitable[None]:\n        ...\n\n    @abstractmethod\n    def __aiter__(self) -> AsyncGenerator[_T_co, _T_contra]:\n        ...\n\n    @property\n    def ag_await(self) -> Any:\n        ...\n\n    @property\n    def ag_code(self) -> CodeType:\n        ...\n\n    @property\n    def ag_frame(self) -> FrameType:\n        ...\n\n    @property\n    def ag_running(self) -> bool:\n        ...\n\n@runtime_checkable\nclass Container(Protocol[_T_co]):\n\n    @abstractmethod\n    def __contains__(self, __x: object) -> bool:\n        ...\n\n@runtime_checkable\nclass Collection(Iterable[_T_co], Container[_T_co], Protocol[_T_co]):\n\n    @abstractmethod\n    def __len__(self) -> int:\n        ...\n_Collection = Collection[_T_co]\n\nclass Sequence(_Collection[_T_co], Reversible[_T_co], Generic[_T_co]):\n\n    @overload\n    @abstractmethod\n    def __getitem__(self, i: int) -> _T_co:\n        ...\n\n    @overload\n    @abstractmethod\n    def __getitem__(self, s: slice) -> Sequence[_T_co]:\n        ...\n\n    def index(self, value: Any, start: int=..., stop: int=...) -> int:\n        ...\n\n    def count(self, value: Any) -> int:\n        ...\n\n    def __contains__(self, x: object) -> bool:\n        ...\n\n    def __iter__(self) -> Iterator[_T_co]:\n        ...\n\n    def __reversed__(self) -> Iterator[_T_co]:\n        ...\n\nclass MutableSequence(Sequence[_T], Generic[_T]):\n\n    @abstractmethod\n    def insert(self, index: int, value: _T) -> None:\n        ...\n\n    @overload\n    @abstractmethod\n    def __getitem__(self, i: int) -> _T:\n        ...\n\n    @overload\n    @abstractmethod\n    def __getitem__(self, s: slice) -> MutableSequence[_T]:\n        ...\n\n    @overload\n    @abstractmethod\n    def __setitem__(self, i: int, o: _T) -> None:\n        ...\n\n    @overload\n    @abstractmethod\n    def __setitem__(self, s: slice, o: Iterable[_T]) -> None:\n        ...\n\n    @overload\n    @abstractmethod\n    def __delitem__(self, i: int) -> None:\n        ...\n\n    @overload\n    @abstractmethod\n    def __delitem__(self, i: slice) -> None:\n        ...\n\n    def append(self, value: _T) -> None:\n        ...\n\n    def clear(self) -> None:\n        ...\n\n    def extend(self, values: Iterable[_T]) -> None:\n        ...\n\n    def reverse(self) -> None:\n        ...\n\n    def pop(self, index: int=...) -> _T:\n        ...\n\n    def remove(self, value: _T) -> None:\n        ...\n\n    def __iadd__(self, x: Iterable[_T]) -> MutableSequence[_T]:\n        ...\n\nclass AbstractSet(_Collection[_T_co], Generic[_T_co]):\n\n    @abstractmethod\n    def __contains__(self, x: object) -> bool:\n        ...\n\n    def __le__(self, s: AbstractSet[Any]) -> bool:\n        ...\n\n    def __lt__(self, s: AbstractSet[Any]) -> bool:\n        ...\n\n    def __gt__(self, s: AbstractSet[Any]) -> bool:\n        ...\n\n    def __ge__(self, s: AbstractSet[Any]) -> bool:\n        ...\n\n    def __and__(self, s: AbstractSet[Any]) -> AbstractSet[_T_co]:\n        ...\n\n    def __or__(self, s: AbstractSet[_T]) -> AbstractSet[Union[_T_co, _T]]:\n        ...\n\n    def __sub__(self, s: AbstractSet[Any]) -> AbstractSet[_T_co]:\n        ...\n\n    def __xor__(self, s: AbstractSet[_T]) -> AbstractSet[Union[_T_co, _T]]:\n        ...\n\n    def isdisjoint(self, other: Iterable[Any]) -> bool:\n        ...\n\nclass MutableSet(AbstractSet[_T], Generic[_T]):\n\n    @abstractmethod\n    def add(self, value: _T) -> None:\n        ...\n\n    @abstractmethod\n    def discard(self, value: _T) -> None:\n        ...\n\n    def clear(self) -> None:\n        ...\n\n    def pop(self) -> _T:\n        ...\n\n    def remove(self, value: _T) -> None:\n        ...\n\n    def __ior__(self, s: AbstractSet[_S]) -> MutableSet[Union[_T, _S]]:\n        ...\n\n    def __iand__(self, s: AbstractSet[Any]) -> MutableSet[_T]:\n        ...\n\n    def __ixor__(self, s: AbstractSet[_S]) -> MutableSet[Union[_T, _S]]:\n        ...\n\n    def __isub__(self, s: AbstractSet[Any]) -> MutableSet[_T]:\n        ...\n\nclass MappingView(Sized):\n\n    def __init__(self, mapping: Mapping[Any, Any]) -> None:\n        ...\n\n    def __len__(self) -> int:\n        ...\n\nclass ItemsView(MappingView, AbstractSet[Tuple[_KT_co, _VT_co]], Generic[_KT_co, _VT_co]):\n\n    def __init__(self, mapping: Mapping[_KT_co, _VT_co]) -> None:\n        ...\n\n    def __and__(self, o: Iterable[Any]) -> Set[Tuple[_KT_co, _VT_co]]:\n        ...\n\n    def __rand__(self, o: Iterable[_T]) -> Set[_T]:\n        ...\n\n    def __contains__(self, o: object) -> bool:\n        ...\n\n    def __iter__(self) -> Iterator[Tuple[_KT_co, _VT_co]]:\n        ...\n    if sys.version_info >= (3, 8):\n\n        def __reversed__(self) -> Iterator[Tuple[_KT_co, _VT_co]]:\n            ...\n\n    def __or__(self, o: Iterable[_T]) -> Set[Union[Tuple[_KT_co, _VT_co], _T]]:\n        ...\n\n    def __ror__(self, o: Iterable[_T]) -> Set[Union[Tuple[_KT_co, _VT_co], _T]]:\n        ...\n\n    def __sub__(self, o: Iterable[Any]) -> Set[Tuple[_KT_co, _VT_co]]:\n        ...\n\n    def __rsub__(self, o: Iterable[_T]) -> Set[_T]:\n        ...\n\n    def __xor__(self, o: Iterable[_T]) -> Set[Union[Tuple[_KT_co, _VT_co], _T]]:\n        ...\n\n    def __rxor__(self, o: Iterable[_T]) -> Set[Union[Tuple[_KT_co, _VT_co], _T]]:\n        ...\n\nclass KeysView(MappingView, AbstractSet[_KT_co], Generic[_KT_co]):\n\n    def __init__(self, mapping: Mapping[_KT_co, Any]) -> None:\n        ...\n\n    def __and__(self, o: Iterable[Any]) -> Set[_KT_co]:\n        ...\n\n    def __rand__(self, o: Iterable[_T]) -> Set[_T]:\n        ...\n\n    def __contains__(self, o: object) -> bool:\n        ...\n\n    def __iter__(self) -> Iterator[_KT_co]:\n        ...\n    if sys.version_info >= (3, 8):\n\n        def __reversed__(self) -> Iterator[_KT_co]:\n            ...\n\n    def __or__(self, o: Iterable[_T]) -> Set[Union[_KT_co, _T]]:\n        ...\n\n    def __ror__(self, o: Iterable[_T]) -> Set[Union[_KT_co, _T]]:\n        ...\n\n    def __sub__(self, o: Iterable[Any]) -> Set[_KT_co]:\n        ...\n\n    def __rsub__(self, o: Iterable[_T]) -> Set[_T]:\n        ...\n\n    def __xor__(self, o: Iterable[_T]) -> Set[Union[_KT_co, _T]]:\n        ...\n\n    def __rxor__(self, o: Iterable[_T]) -> Set[Union[_KT_co, _T]]:\n        ...\n\nclass ValuesView(MappingView, Iterable[_VT_co], Generic[_VT_co]):\n\n    def __init__(self, mapping: Mapping[Any, _VT_co]) -> None:\n        ...\n\n    def __contains__(self, o: object) -> bool:\n        ...\n\n    def __iter__(self) -> Iterator[_VT_co]:\n        ...\n    if sys.version_info >= (3, 8):\n\n        def __reversed__(self) -> Iterator[_VT_co]:\n            ...\n\n@runtime_checkable\nclass ContextManager(Protocol[_T_co]):\n\n    def __enter__(self) -> _T_co:\n        ...\n\n    def __exit__(self, __exc_type: Optional[Type[BaseException]], __exc_value: Optional[BaseException], __traceback: Optional[TracebackType]) -> Optional[bool]:\n        ...\n\n@runtime_checkable\nclass AsyncContextManager(Protocol[_T_co]):\n\n    def __aenter__(self) -> Awaitable[_T_co]:\n        ...\n\n    def __aexit__(self, exc_type: Optional[Type[BaseException]], exc_value: Optional[BaseException], traceback: Optional[TracebackType]) -> Awaitable[Optional[bool]]:\n        ...\n\nclass Mapping(_Collection[_KT], Generic[_KT, _VT_co]):\n\n    @abstractmethod\n    def __getitem__(self, k: _KT) -> _VT_co:\n        ...\n\n    @overload\n    def get(self, key: _KT) -> Optional[_VT_co]:\n        ...\n\n    @overload\n    def get(self, key: _KT, default: Union[_VT_co, _T]) -> Union[_VT_co, _T]:\n        ...\n\n    def items(self) -> AbstractSet[Tuple[_KT, _VT_co]]:\n        ...\n\n    def keys(self) -> AbstractSet[_KT]:\n        ...\n\n    def values(self) -> ValuesView[_VT_co]:\n        ...\n\n    def __contains__(self, o: object) -> bool:\n        ...\n\nclass MutableMapping(Mapping[_KT, _VT], Generic[_KT, _VT]):\n\n    @abstractmethod\n    def __setitem__(self, k: _KT, v: _VT) -> None:\n        ...\n\n    @abstractmethod\n    def __delitem__(self, v: _KT) -> None:\n        ...\n\n    def clear(self) -> None:\n        ...\n\n    @overload\n    def pop(self, key: _KT) -> _VT:\n        ...\n\n    @overload\n    def pop(self, key: _KT, default: Union[_VT, _T]=...) -> Union[_VT, _T]:\n        ...\n\n    def popitem(self) -> Tuple[_KT, _VT]:\n        ...\n\n    def setdefault(self, key: _KT, default: _VT=...) -> _VT:\n        ...\n\n    @overload\n    def update(self, __m: Mapping[_KT, _VT], **kwargs: _VT) -> None:\n        ...\n\n    @overload\n    def update(self, __m: Iterable[Tuple[_KT, _VT]], **kwargs: _VT) -> None:\n        ...\n\n    @overload\n    def update(self, **kwargs: _VT) -> None:\n        ...\nText = str\nTYPE_CHECKING = True\n\nclass IO(Iterator[AnyStr], Generic[AnyStr]):\n\n    @property\n    def mode(self) -> str:\n        ...\n\n    @property\n    def name(self) -> str:\n        ...\n\n    @abstractmethod\n    def close(self) -> None:\n        ...\n\n    @property\n    def closed(self) -> bool:\n        ...\n\n    @abstractmethod\n    def fileno(self) -> int:\n        ...\n\n    @abstractmethod\n    def flush(self) -> None:\n        ...\n\n    @abstractmethod\n    def isatty(self) -> bool:\n        ...\n\n    @abstractmethod\n    def read(self, n: int=...) -> AnyStr:\n        ...\n\n    @abstractmethod\n    def readable(self) -> bool:\n        ...\n\n    @abstractmethod\n    def readline(self, limit: int=...) -> AnyStr:\n        ...\n\n    @abstractmethod\n    def readlines(self, hint: int=...) -> list[AnyStr]:\n        ...\n\n    @abstractmethod\n    def seek(self, offset: int, whence: int=...) -> int:\n        ...\n\n    @abstractmethod\n    def seekable(self) -> bool:\n        ...\n\n    @abstractmethod\n    def tell(self) -> int:\n        ...\n\n    @abstractmethod\n    def truncate(self, size: Optional[int]=...) -> int:\n        ...\n\n    @abstractmethod\n    def writable(self) -> bool:\n        ...\n\n    @abstractmethod\n    def write(self, s: AnyStr) -> int:\n        ...\n\n    @abstractmethod\n    def writelines(self, lines: Iterable[AnyStr]) -> None:\n        ...\n\n    @abstractmethod\n    def __next__(self) -> AnyStr:\n        ...\n\n    @abstractmethod\n    def __iter__(self) -> Iterator[AnyStr]:\n        ...\n\n    @abstractmethod\n    def __enter__(self) -> IO[AnyStr]:\n        ...\n\n    @abstractmethod\n    def __exit__(self, t: Optional[Type[BaseException]], value: Optional[BaseException], traceback: Optional[TracebackType]) -> Optional[bool]:\n        ...\n\nclass BinaryIO(IO[bytes]):\n\n    @abstractmethod\n    def __enter__(self) -> BinaryIO:\n        ...\n\nclass TextIO(IO[str]):\n\n    @property\n    def buffer(self) -> BinaryIO:\n        ...\n\n    @property\n    def encoding(self) -> str:\n        ...\n\n    @property\n    def errors(self) -> Optional[str]:\n        ...\n\n    @property\n    def line_buffering(self) -> int:\n        ...\n\n    @property\n    def newlines(self) -> Any:\n        ...\n\n    @abstractmethod\n    def __enter__(self) -> TextIO:\n        ...\n\nclass ByteString(Sequence[int], metaclass=ABCMeta):\n    ...\n\nclass Match(Generic[AnyStr]):\n    pos: int\n    endpos: int\n    lastindex: Optional[int]\n    lastgroup: Optional[AnyStr]\n    string: AnyStr\n    re: Pattern[AnyStr]\n\n    def expand(self, template: AnyStr) -> AnyStr:\n        ...\n\n    @overload\n    def group(self, __group: _Literal[0]=...) -> AnyStr:\n        ...\n\n    @overload\n    def group(self, __group: str | int) -> AnyStr | Any:\n        ...\n\n    @overload\n    def group(self, __group1: str | int, __group2: str | int, *groups: str | int) -> Tuple[AnyStr | Any, ...]:\n        ...\n\n    @overload\n    def groups(self) -> Tuple[AnyStr | Any, ...]:\n        ...\n\n    @overload\n    def groups(self, default: _T) -> Tuple[AnyStr | _T, ...]:\n        ...\n\n    @overload\n    def groupdict(self) -> dict[str, AnyStr | Any]:\n        ...\n\n    @overload\n    def groupdict(self, default: _T) -> dict[str, AnyStr | _T]:\n        ...\n\n    def start(self, __group: Union[int, str]=...) -> int:\n        ...\n\n    def end(self, __group: Union[int, str]=...) -> int:\n        ...\n\n    def span(self, __group: Union[int, str]=...) -> Tuple[int, int]:\n        ...\n\n    @property\n    def regs(self) -> Tuple[Tuple[int, int], ...]:\n        ...\n\n    @overload\n    def __getitem__(self, __key: _Literal[0]) -> AnyStr:\n        ...\n\n    @overload\n    def __getitem__(self, __key: int | str) -> AnyStr | Any:\n        ...\n    if sys.version_info >= (3, 9):\n\n        def __class_getitem__(cls, item: Any) -> GenericAlias:\n            ...\n\nclass Pattern(Generic[AnyStr]):\n    flags: int\n    groupindex: Mapping[str, int]\n    groups: int\n    pattern: AnyStr\n\n    def search(self, string: AnyStr, pos: int=..., endpos: int=...) -> Optional[Match[AnyStr]]:\n        ...\n\n    def match(self, string: AnyStr, pos: int=..., endpos: int=...) -> Optional[Match[AnyStr]]:\n        ...\n\n    def fullmatch(self, string: AnyStr, pos: int=..., endpos: int=...) -> Optional[Match[AnyStr]]:\n        ...\n\n    def split(self, string: AnyStr, maxsplit: int=...) -> list[AnyStr]:\n        ...\n\n    def findall(self, string: AnyStr, pos: int=..., endpos: int=...) -> list[Any]:\n        ...\n\n    def finditer(self, string: AnyStr, pos: int=..., endpos: int=...) -> Iterator[Match[AnyStr]]:\n        ...\n\n    @overload\n    def sub(self, repl: AnyStr, string: AnyStr, count: int=...) -> AnyStr:\n        ...\n\n    @overload\n    def sub(self, repl: Callable[[Match[AnyStr]], AnyStr], string: AnyStr, count: int=...) -> AnyStr:\n        ...\n\n    @overload\n    def subn(self, repl: AnyStr, string: AnyStr, count: int=...) -> Tuple[AnyStr, int]:\n        ...\n\n    @overload\n    def subn(self, repl: Callable[[Match[AnyStr]], AnyStr], string: AnyStr, count: int=...) -> Tuple[AnyStr, int]:\n        ...\n    if sys.version_info >= (3, 9):\n\n        def __class_getitem__(cls, item: Any) -> GenericAlias:\n            ...\nif sys.version_info >= (3, 7):\n    _get_type_hints_obj_allowed_types = Union[object, Callable[..., Any], FunctionType, BuiltinFunctionType, MethodType, ModuleType, WrapperDescriptorType, MethodWrapperType, MethodDescriptorType]\nelse:\n    _get_type_hints_obj_allowed_types = Union[object, Callable[..., Any], FunctionType, BuiltinFunctionType, MethodType, ModuleType]\nif sys.version_info >= (3, 9):\n\n    def get_type_hints(obj: _get_type_hints_obj_allowed_types, globalns: Optional[Dict[str, Any]]=..., localns: Optional[Dict[str, Any]]=..., include_extras: bool=...) -> Dict[str, Any]:\n        ...\nelse:\n\n    def get_type_hints(obj: _get_type_hints_obj_allowed_types, globalns: Optional[Dict[str, Any]]=..., localns: Optional[Dict[str, Any]]=...) -> Dict[str, Any]:\n        ...\nif sys.version_info >= (3, 8):\n\n    def get_origin(tp: Any) -> Optional[Any]:\n        ...\n\n    def get_args(tp: Any) -> Tuple[Any, ...]:\n        ...\n\n@overload\ndef cast(typ: Type[_T], val: Any) -> _T:\n    ...\n\n@overload\ndef cast(typ: str, val: Any) -> Any:\n    ...\n\n@overload\ndef cast(typ: object, val: Any) -> Any:\n    ...\n\nclass NamedTuple(Tuple[Any, ...]):\n    _field_types: collections.OrderedDict[str, Type[Any]]\n    _field_defaults: Dict[str, Any] = ...\n    _fields: Tuple[str, ...]\n    _source: str\n\n    def __init__(self, typename: str, fields: Iterable[Tuple[str, Any]]=..., **kwargs: Any) -> None:\n        ...\n\n    @classmethod\n    def _make(cls: Type[_T], iterable: Iterable[Any]) -> _T:\n        ...\n    if sys.version_info >= (3, 8):\n\n        def _asdict(self) -> Dict[str, Any]:\n            ...\n    else:\n\n        def _asdict(self) -> collections.OrderedDict[str, Any]:\n            ...\n\n    def _replace(self: _T, **kwargs: Any) -> _T:\n        ...\n\nclass _TypedDict(Mapping[str, object], metaclass=ABCMeta):\n\n    def copy(self: _T) -> _T:\n        ...\n\n    def setdefault(self, k: NoReturn, default: object) -> object:\n        ...\n\n    def pop(self, k: NoReturn, default: _T=...) -> object:\n        ...\n\n    def update(self: _T, __m: _T) -> None:\n        ...\n\n    def __delitem__(self, k: NoReturn) -> None:\n        ...\n\n    def items(self) -> ItemsView[str, object]:\n        ...\n\n    def keys(self) -> KeysView[str]:\n        ...\n\n    def values(self) -> ValuesView[object]:\n        ...\n\n    def __or__(self: _T, __value: _T) -> _T:\n        ...\n\n    def __ior__(self: _T, __value: _T) -> _T:\n        ...\n\ndef NewType(name: str, tp: Type[_T]) -> Type[_T]:\n    ...\n\ndef type_check_only(func_or_cls: _F) -> _F:\n    ...\nif sys.version_info >= (3, 7):\n\n    class ForwardRef:\n        __forward_arg__: str\n        __forward_code__: CodeType\n        __forward_evaluated__: bool\n        __forward_value__: Optional[Any]\n        __forward_is_argument__: bool\n\n        def __init__(self, arg: str, is_argument: bool=...) -> None:\n            ...\n\n        def _evaluate(self, globalns: Optional[Dict[str, Any]], localns: Optional[Dict[str, Any]]) -> Optional[Any]:\n            ...\n\n        def __eq__(self, other: Any) -> bool:\n            ...\n\n        def __hash__(self) -> int:\n            ...\n\n        def __repr__(self) -> str:\n            ...\nif sys.version_info >= (3, 10):\n\n    def is_typeddict(tp: Any) -> bool:\n        ...",
    "/typeshed/stdlib/typing_extensions.pyi": "import abc\nimport sys\nfrom typing import TYPE_CHECKING as TYPE_CHECKING, Any, AsyncContextManager as AsyncContextManager, AsyncGenerator as AsyncGenerator, AsyncIterable as AsyncIterable, AsyncIterator as AsyncIterator, Awaitable as Awaitable, Callable, ChainMap as ChainMap, ClassVar as ClassVar, ContextManager as ContextManager, Coroutine as Coroutine, Counter as Counter, DefaultDict as DefaultDict, Deque as Deque, ItemsView, KeysView, Mapping, NewType as NewType, NoReturn as NoReturn, Text as Text, Tuple, Type as Type, TypeVar, ValuesView, _Alias, overload as overload\n_T = TypeVar('_T')\n_F = TypeVar('_F', bound=Callable[..., Any])\n_TC = TypeVar('_TC', bound=Type[object])\n\nclass _SpecialForm:\n\n    def __getitem__(self, typeargs: Any) -> Any:\n        ...\n\ndef runtime_checkable(cls: _TC) -> _TC:\n    ...\nruntime = runtime_checkable\nProtocol: _SpecialForm = ...\nFinal: _SpecialForm = ...\n\ndef final(f: _F) -> _F:\n    ...\nLiteral: _SpecialForm = ...\n\ndef IntVar(name: str) -> Any:\n    ...\n\nclass _TypedDict(Mapping[str, object], metaclass=abc.ABCMeta):\n\n    def copy(self: _T) -> _T:\n        ...\n\n    def setdefault(self, k: NoReturn, default: object) -> object:\n        ...\n\n    def pop(self, k: NoReturn, default: _T=...) -> object:\n        ...\n\n    def update(self: _T, __m: _T) -> None:\n        ...\n\n    def items(self) -> ItemsView[str, object]:\n        ...\n\n    def keys(self) -> KeysView[str]:\n        ...\n\n    def values(self) -> ValuesView[object]:\n        ...\n\n    def __delitem__(self, k: NoReturn) -> None:\n        ...\nTypedDict: object = ...\nOrderedDict = _Alias()\n\ndef get_type_hints(obj: Callable[..., Any], globalns: dict[str, Any] | None=..., localns: dict[str, Any] | None=..., include_extras: bool=...) -> dict[str, Any]:\n    ...\nif sys.version_info >= (3, 7):\n\n    def get_args(tp: Any) -> Tuple[Any, ...]:\n        ...\n\n    def get_origin(tp: Any) -> Any | None:\n        ...\nAnnotated: _SpecialForm = ...\n_AnnotatedAlias: Any = ...\n\n@runtime_checkable\nclass SupportsIndex(Protocol, metaclass=abc.ABCMeta):\n\n    @abc.abstractmethod\n    def __index__(self) -> int:\n        ...\nif sys.version_info >= (3, 10):\n    from typing import Concatenate as Concatenate, ParamSpec as ParamSpec, TypeAlias as TypeAlias, TypeGuard as TypeGuard\nelse:\n\n    class ParamSpecArgs:\n        __origin__: ParamSpec\n\n        def __init__(self, origin: ParamSpec) -> None:\n            ...\n\n    class ParamSpecKwargs:\n        __origin__: ParamSpec\n\n        def __init__(self, origin: ParamSpec) -> None:\n            ...\n\n    class ParamSpec:\n        __name__: str\n        __bound__: Type[Any] | None\n        __covariant__: bool\n        __contravariant__: bool\n\n        def __init__(self, name: str, *, bound: None | Type[Any] | str=..., contravariant: bool=..., covariant: bool=...) -> None:\n            ...\n\n        @property\n        def args(self) -> ParamSpecArgs:\n            ...\n\n        @property\n        def kwargs(self) -> ParamSpecKwargs:\n            ...\n    Concatenate: _SpecialForm = ...\n    TypeAlias: _SpecialForm = ...\n    TypeGuard: _SpecialForm = ...",
    "/typeshed/stdlib/uarray.pyi": "from array import *",
    "/typeshed/stdlib/ucollections.pyi": "from collections import *",
    "/typeshed/stdlib/uerrno.pyi": "from errno import *",
    "/typeshed/stdlib/urandom.pyi": "from random import *",
    "/typeshed/stdlib/ustruct.pyi": "from struct import *",
    "/typeshed/stdlib/usys.pyi": "from sys import *",
    "/typeshed/stdlib/utime.pyi": "from time import *",
    "/typeshed/stdlib/_typeshed/__init__.pyi": "import array\nimport sys\nfrom os import PathLike\nfrom typing import AbstractSet, Any, Container, Iterable, Protocol, Tuple, TypeVar, Union\nfrom typing_extensions import Literal, final\n_KT = TypeVar('_KT')\n_KT_co = TypeVar('_KT_co', covariant=True)\n_KT_contra = TypeVar('_KT_contra', contravariant=True)\n_VT = TypeVar('_VT')\n_VT_co = TypeVar('_VT_co', covariant=True)\n_T = TypeVar('_T')\n_T_co = TypeVar('_T_co', covariant=True)\n_T_contra = TypeVar('_T_contra', contravariant=True)\nSelf = TypeVar('Self')\n\nclass IdentityFunction(Protocol):\n\n    def __call__(self, __x: _T) -> _T:\n        ...\n\nclass SupportsLessThan(Protocol):\n\n    def __lt__(self, __other: Any) -> bool:\n        ...\nSupportsLessThanT = TypeVar('SupportsLessThanT', bound=SupportsLessThan)\n\nclass SupportsDivMod(Protocol[_T_contra, _T_co]):\n\n    def __divmod__(self, __other: _T_contra) -> _T_co:\n        ...\n\nclass SupportsRDivMod(Protocol[_T_contra, _T_co]):\n\n    def __rdivmod__(self, __other: _T_contra) -> _T_co:\n        ...\n\nclass SupportsLenAndGetItem(Protocol[_T_co]):\n\n    def __len__(self) -> int:\n        ...\n\n    def __getitem__(self, __k: int) -> _T_co:\n        ...\n\nclass SupportsItems(Protocol[_KT_co, _VT_co]):\n\n    def items(self) -> AbstractSet[Tuple[_KT_co, _VT_co]]:\n        ...\n\nclass SupportsKeysAndGetItem(Protocol[_KT, _VT_co]):\n\n    def keys(self) -> Iterable[_KT]:\n        ...\n\n    def __getitem__(self, __k: _KT) -> _VT_co:\n        ...\n\nclass SupportsGetItem(Container[_KT_contra], Protocol[_KT_contra, _VT_co]):\n\n    def __getitem__(self, __k: _KT_contra) -> _VT_co:\n        ...\n\nclass SupportsItemAccess(SupportsGetItem[_KT_contra, _VT], Protocol[_KT_contra, _VT]):\n\n    def __setitem__(self, __k: _KT_contra, __v: _VT) -> None:\n        ...\n\n    def __delitem__(self, __v: _KT_contra) -> None:\n        ...\nStrPath = Union[str, PathLike[str]]\nBytesPath = Union[bytes, PathLike[bytes]]\nStrOrBytesPath = Union[str, bytes, PathLike[str], PathLike[bytes]]\nOpenTextModeUpdating = Literal['r+', '+r', 'rt+', 'r+t', '+rt', 'tr+', 't+r', '+tr', 'w+', '+w', 'wt+', 'w+t', '+wt', 'tw+', 't+w', '+tw', 'a+', '+a', 'at+', 'a+t', '+at', 'ta+', 't+a', '+ta', 'x+', '+x', 'xt+', 'x+t', '+xt', 'tx+', 't+x', '+tx']\nOpenTextModeWriting = Literal['w', 'wt', 'tw', 'a', 'at', 'ta', 'x', 'xt', 'tx']\nOpenTextModeReading = Literal['r', 'rt', 'tr', 'U', 'rU', 'Ur', 'rtU', 'rUt', 'Urt', 'trU', 'tUr', 'Utr']\nOpenTextMode = Union[OpenTextModeUpdating, OpenTextModeWriting, OpenTextModeReading]\nOpenBinaryModeUpdating = Literal['rb+', 'r+b', '+rb', 'br+', 'b+r', '+br', 'wb+', 'w+b', '+wb', 'bw+', 'b+w', '+bw', 'ab+', 'a+b', '+ab', 'ba+', 'b+a', '+ba', 'xb+', 'x+b', '+xb', 'bx+', 'b+x', '+bx']\nOpenBinaryModeWriting = Literal['wb', 'bw', 'ab', 'ba', 'xb', 'bx']\nOpenBinaryModeReading = Literal['rb', 'br', 'rbU', 'rUb', 'Urb', 'brU', 'bUr', 'Ubr']\nOpenBinaryMode = Union[OpenBinaryModeUpdating, OpenBinaryModeReading, OpenBinaryModeWriting]\n\nclass HasFileno(Protocol):\n\n    def fileno(self) -> int:\n        ...\nFileDescriptor = int\nFileDescriptorLike = Union[int, HasFileno]\n\nclass SupportsRead(Protocol[_T_co]):\n\n    def read(self, __length: int=...) -> _T_co:\n        ...\n\nclass SupportsReadline(Protocol[_T_co]):\n\n    def readline(self, __length: int=...) -> _T_co:\n        ...\n\nclass SupportsNoArgReadline(Protocol[_T_co]):\n\n    def readline(self) -> _T_co:\n        ...\n\nclass SupportsWrite(Protocol[_T_contra]):\n\n    def write(self, __s: _T_contra) -> Any:\n        ...\nReadableBuffer = Union[bytes, bytearray, memoryview, array.array[Any]]\nWriteableBuffer = Union[bytearray, memoryview, array.array[Any]]\nif sys.version_info >= (3, 10):\n    from types import NoneType as NoneType\nelse:\n\n    @final\n    class NoneType:\n\n        def __bool__(self) -> Literal[False]:\n            ...",
    "/typeshed/stdlib/microbit/__init__.pyi": "\"\"\"Pins, images, sounds, temperature and volume. (microbit)\"\"\"\nfrom _typeshed import ReadableBuffer\nfrom typing import Any, Callable, List, Optional, overload\nfrom . import accelerometer as accelerometer\nfrom . import compass as compass\nfrom . import display as display\nfrom . import i2c as i2c\nfrom . import microphone as microphone\nfrom . import speaker as speaker\nfrom . import spi as spi\nfrom . import uart as uart\nfrom . import audio as audio\n\ndef run_every(callback: Optional[Callable[[], None]]=None, days: int=0, h: int=0, min: int=0, s: int=0, ms: int=0) -> Callable[[Callable[[], None]], Callable[[], None]]:\n    \"\"\"Schedule a function to be called at a given interval **V2 only**. (run every)\n\nExample: ``run_every(my_logging, min=5)``\n\nThis function can be passed a callback::\n\n    run_every(your_function, h=1, min=20, s=30, ms=50)\n\nor used as a decorator::\n\n    @run_every(h=1, min=20, s=30, ms=50)\n    def your_function():\n        pass\n\nArguments with different time units are additive.\n\n:param callback: (callback) The callback to invoke. Omit when using as a decorator.\n:param days: (days) The interval in days.\n:param h: (h) The interval in hours.\n:param min: (min) The interval in minutes.\n:param s: (s) The interval in seconds.\n:param ms: (ms) The interval in milliseconds.\"\"\"\n\ndef panic(n: int) -> None:\n    \"\"\"Enter a panic mode. (panic)\n\nExample: ``panic(127)``\n\n:param n: (n) An arbitrary integer <= 255 to indicate a status.\n\nRequires restart.\"\"\"\n\ndef reset() -> None:\n    \"\"\"Restart the board. (reset)\"\"\"\n\ndef sleep(n: float) -> None:\n    \"\"\"Wait for ``n`` milliseconds. (sleep)\n\nExample: ``sleep(1000)``\n\n:param n: (n) The number of milliseconds to wait\n\nOne second is 1000 milliseconds, so::\n\n    microbit.sleep(1000)\n\nwill pause the execution for one second.\"\"\"\n\ndef running_time() -> int:\n    \"\"\"Get the running time of the board. (running time)\n\n:return: The number of milliseconds since the board was switched on or restarted.\"\"\"\n\ndef temperature() -> int:\n    \"\"\"Get the temperature of the micro:bit in degrees Celcius. (temperature)\"\"\"\n\ndef set_volume(v: int) -> None:\n    \"\"\"Sets the volume. (set volume)\n\nExample: ``set_volume(127)``\n\n:param v: (v) a value between 0 (low) and 255 (high).\n\nOut of range values will be clamped to 0 or 255.\n\n**V2** only.\"\"\"\n    ...\n\nclass Button:\n    \"\"\"The class for the buttons `button_a` and `button_b`. (button)\"\"\"\n\n    def is_pressed(self) -> bool:\n        \"\"\"Check if the button is pressed. (is pressed)\n\n:return: ``True`` if the specified button ``button`` is pressed, and ``False`` otherwise.\"\"\"\n        ...\n\n    def was_pressed(self) -> bool:\n        \"\"\"Check if the button was pressed since the device started or the last time this method was called. (was pressed)\n\nCalling this method will clear the press state so\nthat the button must be pressed again before this method will return\n``True`` again.\n\n:return: ``True`` if the specified button ``button`` was pressed, and ``False`` otherwise\"\"\"\n        ...\n\n    def get_presses(self) -> int:\n        \"\"\"Get the running total of button presses, and resets this total\nto zero before returning. (get presses)\n\n:return: The number of presses since the device started or the last time this method was called\"\"\"\n        ...\nbutton_a: Button\n\"\"\"The left button ``Button`` object. (button a)\"\"\"\nbutton_b: Button\n\"\"\"The right button ``Button`` object. (button b)\"\"\"\n\nclass MicroBitDigitalPin:\n    \"\"\"A digital pin. (microbitdigitalpin)\n\nSome pins support analog and touch features using the ``MicroBitAnalogDigitalPin`` and ``MicroBitTouchPin`` subclasses.\"\"\"\n    NO_PULL: int\n    PULL_UP: int\n    PULL_DOWN: int\n\n    def read_digital(self) -> int:\n        \"\"\"Get the digital value of the pin. (read digital)\n\nExample: ``value = pin0.read_digital()``\n\n:return: 1 if the pin is high, and 0 if it's low.\"\"\"\n        ...\n\n    def write_digital(self, value: int) -> None:\n        \"\"\"Set the digital value of the pin. (write digital)\n\nExample: ``pin0.write_digital(1)``\n\n:param value: (value) 1 to set the pin high or 0 to set the pin low\"\"\"\n        ...\n\n    def set_pull(self, value: int) -> None:\n        \"\"\"Set the pull state to one of three possible values: ``PULL_UP``, ``PULL_DOWN`` or ``NO_PULL``. (set pull)\n\nExample: ``pin0.set_pull(pin0.PULL_UP)``\n\n:param value: (value) The pull state from the relevant pin, e.g. ``pin0.PULL_UP``.\"\"\"\n        ...\n\n    def get_pull(self) -> int:\n        \"\"\"Get the pull state on a pin. (get pull)\n\nExample: ``pin0.get_pull()``\n\n:return: ``NO_PULL``, ``PULL_DOWN``, or ``PULL_UP``\n\nThese are set using the ``set_pull()`` method or automatically configured\nwhen a pin mode requires it.\"\"\"\n        ...\n\n    def get_mode(self) -> str:\n        \"\"\"Returns the pin mode. (get mode)\n\nExample: ``pin0.get_mode()``\n\nWhen a pin is used for a specific function, like\nwriting a digital value, or reading an analog value, the pin mode\nchanges.\n\n:return: ``\"unused\"``, ``\"analog\"``, ``\"read_digital\"``, ``\"write_digital\"``, ``\"display\"``, ``\"button\"``, ``\"music\"``, ``\"audio\"``, ``\"touch\"``, ``\"i2c\"``, or ``\"spi\"``\"\"\"\n        ...\n\n    def write_analog(self, value: int) -> None:\n        \"\"\"Output a PWM signal on the pin, with the duty cycle proportional to ``value``. (write analog)\n\nExample: ``pin0.write_analog(254)``\n\n:param value: (value) An integer or a floating point number between 0 (0% duty cycle) and 1023 (100% duty).\"\"\"\n\n    def set_analog_period(self, period: int) -> None:\n        \"\"\"Set the period of the PWM signal being output to ``period`` in milliseconds. (set analog period)\n\nExample: ``pin0.set_analog_period(10)``\n\n:param period: (period) The period in milliseconds with a minimum valid value of 1ms.\"\"\"\n\n    def set_analog_period_microseconds(self, period: int) -> None:\n        \"\"\"Set the period of the PWM signal being output to ``period`` in microseconds. (set analog period microseconds)\n\nExample: ``pin0.set_analog_period_microseconds(512)``\n\n:param period: (period) The period in microseconds with a minimum valid value of 256\u00b5s.\"\"\"\n\nclass MicroBitAnalogDigitalPin(MicroBitDigitalPin):\n    \"\"\"A pin with analog and digital features. (microbitanalogdigitalpin)\"\"\"\n\n    def read_analog(self) -> int:\n        \"\"\"Read the voltage applied to the pin. (read analog)\n\nExample: ``pin0.read_analog()``\n\n:return: An integer between 0 (meaning 0V) and 1023 (meaning 3.3V).\"\"\"\n\nclass MicroBitTouchPin(MicroBitAnalogDigitalPin):\n    \"\"\"A pin with analog, digital and touch features. (microbittouchpin)\"\"\"\n    CAPACITIVE: int\n    RESISTIVE: int\n\n    def is_touched(self) -> bool:\n        \"\"\"Check if the pin is being touched. (is touched)\n\nExample: ``pin0.is_touched()``\n\nThe default touch mode for the pins on the edge connector is `resistive`.\nThe default for the logo pin **V2** is `capacitive`.\n\n**Resistive touch**\nThis test is done by measuring how much resistance there is between the\npin and ground.  A low resistance gives a reading of ``True``.  To get\na reliable reading using a finger you may need to touch the ground pin\nwith another part of your body, for example your other hand.\n\n**Capacitive touch**\nThis test is done by interacting with the electric field of a capacitor\nusing a finger as a conductor. `Capacitive touch\n<https://www.allaboutcircuits.com/technical-articles/introduction-to-capacitive-touch-sensing>`_\ndoes not require you to make a ground connection as part of a circuit.\n\n:return: ``True`` if the pin is being touched with a finger, otherwise return ``False``.\"\"\"\n        ...\n\n    def set_touch_mode(self, value: int) -> None:\n        \"\"\"Set the touch mode for the pin. (set touch mode)\n\nExample: ``pin0.set_touch_mode(pin0.CAPACITIVE)``\n\nThe default touch mode for the pins on the edge connector is\n`resistive`. The default for the logo pin **V2** is `capacitive`.\n\n:param value: (value) ``CAPACITIVE`` or ``RESISTIVE`` from the relevant pin.\"\"\"\n        ...\npin0: MicroBitTouchPin\n\"\"\"Pin with digital, analog and touch features. (pin0)\"\"\"\npin1: MicroBitTouchPin\n\"\"\"Pin with digital, analog and touch features. (pin1)\"\"\"\npin2: MicroBitTouchPin\n\"\"\"Pin with digital, analog and touch features. (pin2)\"\"\"\npin3: MicroBitAnalogDigitalPin\n\"\"\"Pin with digital and analog features. (pin3)\"\"\"\npin4: MicroBitAnalogDigitalPin\n\"\"\"Pin with digital and analog features. (pin4)\"\"\"\npin5: MicroBitDigitalPin\n\"\"\"Pin with digital features. (pin5)\"\"\"\npin6: MicroBitDigitalPin\n\"\"\"Pin with digital features. (pin6)\"\"\"\npin7: MicroBitDigitalPin\n\"\"\"Pin with digital features. (pin7)\"\"\"\npin8: MicroBitDigitalPin\n\"\"\"Pin with digital features. (pin8)\"\"\"\npin9: MicroBitDigitalPin\n\"\"\"Pin with digital features. (pin9)\"\"\"\npin10: MicroBitAnalogDigitalPin\n\"\"\"Pin with digital and analog features. (pin10)\"\"\"\npin11: MicroBitDigitalPin\n\"\"\"Pin with digital features. (pin11)\"\"\"\npin12: MicroBitDigitalPin\n\"\"\"Pin with digital features. (pin12)\"\"\"\npin13: MicroBitDigitalPin\n\"\"\"Pin with digital features. (pin13)\"\"\"\npin14: MicroBitDigitalPin\n\"\"\"Pin with digital features. (pin14)\"\"\"\npin15: MicroBitDigitalPin\n\"\"\"Pin with digital features. (pin15)\"\"\"\npin16: MicroBitDigitalPin\n\"\"\"Pin with digital features. (pin16)\"\"\"\npin19: MicroBitDigitalPin\n\"\"\"Pin with digital features. (pin19)\"\"\"\npin20: MicroBitDigitalPin\n\"\"\"Pin with digital features. (pin20)\"\"\"\npin_logo: MicroBitTouchPin\n\"\"\"A touch sensitive logo pin on the front of the micro:bit, which by default is set to capacitive touch mode. (pin logo)\"\"\"\npin_speaker: MicroBitAnalogDigitalPin\n\"\"\"A pin to address the micro:bit speaker. (pin speaker)\n\nThis API is intended only for use in Pulse-Width Modulation pin operations e.g. pin_speaker.write_analog(128).\n\"\"\"\n\nclass Image:\n    \"\"\"An image to show on the micro:bit LED display. (image)\n\nGiven an image object it's possible to display it via the ``display`` API::\n\n    display.show(Image.HAPPY)\"\"\"\n    HEART: Image\n    \"\"\"Heart image. (heart)\"\"\"\n    HEART_SMALL: Image\n    \"\"\"Small heart image. (heart small)\"\"\"\n    HAPPY: Image\n    \"\"\"Happy face image. (happy)\"\"\"\n    SMILE: Image\n    \"\"\"Smiling face image. (smile)\"\"\"\n    SAD: Image\n    \"\"\"Sad face image. (sad)\"\"\"\n    CONFUSED: Image\n    \"\"\"Confused face image. (confused)\"\"\"\n    ANGRY: Image\n    \"\"\"Angry face image. (angry)\"\"\"\n    ASLEEP: Image\n    \"\"\"Sleeping face image. (asleep)\"\"\"\n    SURPRISED: Image\n    \"\"\"Surprised face image. (surprised)\"\"\"\n    SILLY: Image\n    \"\"\"Silly face image. (silly)\"\"\"\n    FABULOUS: Image\n    \"\"\"Sunglasses face image. (fabulous)\"\"\"\n    MEH: Image\n    \"\"\"Unimpressed face image. (meh)\"\"\"\n    YES: Image\n    \"\"\"Tick image. (yes)\"\"\"\n    NO: Image\n    \"\"\"Cross image. (no)\"\"\"\n    CLOCK12: Image\n    \"\"\"Image with line pointing to 12 o'clock. (clock12)\"\"\"\n    CLOCK11: Image\n    \"\"\"Image with line pointing to 11 o'clock. (clock11)\"\"\"\n    CLOCK10: Image\n    \"\"\"Image with line pointing to 10 o'clock. (clock10)\"\"\"\n    CLOCK9: Image\n    \"\"\"Image with line pointing to 9 o'clock. (clock9)\"\"\"\n    CLOCK8: Image\n    \"\"\"Image with line pointing to 8 o'clock. (clock8)\"\"\"\n    CLOCK7: Image\n    \"\"\"Image with line pointing to 7 o'clock. (clock7)\"\"\"\n    CLOCK6: Image\n    \"\"\"Image with line pointing to 6 o'clock. (clock6)\"\"\"\n    CLOCK5: Image\n    \"\"\"Image with line pointing to 5 o'clock. (clock5)\"\"\"\n    CLOCK4: Image\n    \"\"\"Image with line pointing to 4 o'clock. (clock4)\"\"\"\n    CLOCK3: Image\n    \"\"\"Image with line pointing to 3 o'clock. (clock3)\"\"\"\n    CLOCK2: Image\n    \"\"\"Image with line pointing to 2 o'clock. (clock2)\"\"\"\n    CLOCK1: Image\n    \"\"\"Image with line pointing to 1 o'clock. (clock1)\"\"\"\n    ARROW_N: Image\n    \"\"\"Image of arrow pointing north. (arrow n)\"\"\"\n    ARROW_NE: Image\n    \"\"\"Image of arrow pointing north east. (arrow ne)\"\"\"\n    ARROW_E: Image\n    \"\"\"Image of arrow pointing east. (arrow e)\"\"\"\n    ARROW_SE: Image\n    \"\"\"Image of arrow pointing south east. (arrow se)\"\"\"\n    ARROW_S: Image\n    \"\"\"Image of arrow pointing south. (arrow s)\"\"\"\n    ARROW_SW: Image\n    \"\"\"Image of arrow pointing south west. (arrow sw)\"\"\"\n    ARROW_W: Image\n    \"\"\"Image of arrow pointing west. (arrow w)\"\"\"\n    ARROW_NW: Image\n    \"\"\"Image of arrow pointing north west. (arrow nw)\"\"\"\n    TRIANGLE: Image\n    \"\"\"Image of a triangle pointing up. (triangle)\"\"\"\n    TRIANGLE_LEFT: Image\n    \"\"\"Image of a triangle in the left corner. (triangle left)\"\"\"\n    CHESSBOARD: Image\n    \"\"\"Alternate LEDs lit in a chessboard pattern. (chessboard)\"\"\"\n    DIAMOND: Image\n    \"\"\"Diamond image. (diamond)\"\"\"\n    DIAMOND_SMALL: Image\n    \"\"\"Small diamond image. (diamond small)\"\"\"\n    SQUARE: Image\n    \"\"\"Square image. (square)\"\"\"\n    SQUARE_SMALL: Image\n    \"\"\"Small square image. (square small)\"\"\"\n    RABBIT: Image\n    \"\"\"Rabbit image. (rabbit)\"\"\"\n    COW: Image\n    \"\"\"Cow image. (cow)\"\"\"\n    MUSIC_CROTCHET: Image\n    \"\"\"Crotchet note image. (music crotchet)\"\"\"\n    MUSIC_QUAVER: Image\n    \"\"\"Quaver note image. (music quaver)\"\"\"\n    MUSIC_QUAVERS: Image\n    \"\"\"Pair of quavers note image. (music quavers)\"\"\"\n    PITCHFORK: Image\n    \"\"\"Pitchfork image. (pitchfork)\"\"\"\n    XMAS: Image\n    \"\"\"Christmas tree image. (xmas)\"\"\"\n    PACMAN: Image\n    \"\"\"Pac-Man arcade character image. (pacman)\"\"\"\n    TARGET: Image\n    \"\"\"Target image. (target)\"\"\"\n    TSHIRT: Image\n    \"\"\"T-shirt image. (tshirt)\"\"\"\n    ROLLERSKATE: Image\n    \"\"\"Rollerskate image. (rollerskate)\"\"\"\n    DUCK: Image\n    \"\"\"Duck image. (duck)\"\"\"\n    HOUSE: Image\n    \"\"\"House image. (house)\"\"\"\n    TORTOISE: Image\n    \"\"\"Tortoise image. (tortoise)\"\"\"\n    BUTTERFLY: Image\n    \"\"\"Butterfly image. (butterfly)\"\"\"\n    STICKFIGURE: Image\n    \"\"\"Stick figure image. (stickfigure)\"\"\"\n    GHOST: Image\n    \"\"\"Ghost image. (ghost)\"\"\"\n    SWORD: Image\n    \"\"\"Sword image. (sword)\"\"\"\n    GIRAFFE: Image\n    \"\"\"Giraffe image. (giraffe)\"\"\"\n    SKULL: Image\n    \"\"\"Skull image. (skull)\"\"\"\n    UMBRELLA: Image\n    \"\"\"Umbrella image. (umbrella)\"\"\"\n    SNAKE: Image\n    \"\"\"Snake image. (snake)\"\"\"\n    ALL_CLOCKS: List[Image]\n    \"\"\"A list containing all the CLOCK_ images in sequence. (all clocks)\"\"\"\n    ALL_ARROWS: List[Image]\n    \"\"\"A list containing all the ARROW_ images in sequence. (all arrows)\"\"\"\n\n    @overload\n    def __init__(self, string: str) -> None:\n        \"\"\"Create an image from a string describing which LEDs are lit. (init)\n\n``string`` has to consist of digits 0-9 arranged into lines,\ndescribing the image, for example::\n\n    image = Image(\"90009:\"\n                  \"09090:\"\n                  \"00900:\"\n                  \"09090:\"\n                  \"90009\")\n\nwill create a 5\u00d75 image of an X. The end of a line is indicated by a\ncolon. It's also possible to use newlines (\\\\n) insead of the colons.\n\n:param string: (string) The string describing the image.\"\"\"\n        ...\n\n    @overload\n    def __init__(self, width: int=5, height: int=5, buffer: ReadableBuffer=None) -> None:\n        \"\"\"Create an empty image with ``width`` columns and ``height`` rows. (init)\n\n:param width: (width) Optional width of the image\n:param height: (height) Optional height of the image\n:param buffer: (buffer) Optional array or bytes of ``width``\u00d7``height`` integers in range 0-9 to initialize the image\n\nExamples::\n\n    Image(2, 2, b'\\x08\\x08\\x08\\x08')\n    Image(2, 2, bytearray([9,9,9,9]))\n\nThese create 2 x 2 pixel images at full brightness.\"\"\"\n        ...\n\n    def width(self) -> int:\n        \"\"\"Get the number of columns. (width)\n\n:return: The number of columns in the image\"\"\"\n        ...\n\n    def height(self) -> int:\n        \"\"\"Get the number of rows. (height)\n\n:return: The number of rows in the image\"\"\"\n        ...\n\n    def set_pixel(self, x: int, y: int, value: int) -> None:\n        \"\"\"Set the brightness of a pixel. (set pixel)\n\nExample: ``my_image.set_pixel(0, 0, 9)``\n\n:param x: (x) The column number\n:param y: (y) The row number\n:param value: (value) The brightness as an integer between 0 (dark) and 9 (bright)\n\nThis method will raise an exception when called on any of the built-in\nread-only images, like ``Image.HEART``.\"\"\"\n        ...\n\n    def get_pixel(self, x: int, y: int) -> int:\n        \"\"\"Get the brightness of a pixel. (get pixel)\n\nExample: ``my_image.get_pixel(0, 0)``\n\n:param x: (x) The column number\n:param y: (y) The row number\n:return: The brightness as an integer between 0 and 9.\"\"\"\n        ...\n\n    def shift_left(self, n: int) -> Image:\n        \"\"\"Create a new image by shifting the picture left. (shift left)\n\nExample: ``Image.HEART_SMALL.shift_left(1)``\n\n:param n: (n) The number of columns to shift by\n:return: The shifted image\"\"\"\n        ...\n\n    def shift_right(self, n: int) -> Image:\n        \"\"\"Create a new image by shifting the picture right. (shift right)\n\nExample: ``Image.HEART_SMALL.shift_right(1)``\n\n:param n: (n) The number of columns to shift by\n:return: The shifted image\"\"\"\n        ...\n\n    def shift_up(self, n: int) -> Image:\n        \"\"\"Create a new image by shifting the picture up. (shift up)\n\nExample: ``Image.HEART_SMALL.shift_up(1)``\n\n:param n: (n) The number of rows to shift by\n:return: The shifted image\"\"\"\n        ...\n\n    def shift_down(self, n: int) -> Image:\n        \"\"\"Create a new image by shifting the picture down. (shift down)\n\nExample: ``Image.HEART_SMALL.shift_down(1)``\n\n:param n: (n) The number of rows to shift by\n:return: The shifted image\"\"\"\n        ...\n\n    def crop(self, x: int, y: int, w: int, h: int) -> Image:\n        \"\"\"Create a new image by cropping the picture. (crop)\n\nExample: ``Image.HEART.crop(1, 1, 3, 3)``\n\n:param x: (x) The crop offset column\n:param y: (y) The crop offset row\n:param w: (w) The crop width\n:param h: (h) The crop height\n:return: The new image\"\"\"\n        ...\n\n    def copy(self) -> Image:\n        \"\"\"Create an exact copy of the image. (copy)\n\nExample: ``Image.HEART.copy()``\n\n:return: The new image\"\"\"\n        ...\n\n    def invert(self) -> Image:\n        \"\"\"Create a new image by inverting the brightness of the pixels in the\nsource image. (invert)\n\nExample: ``Image.SMALL_HEART.invert()``\n\n:return: The new image.\"\"\"\n        ...\n\n    def fill(self, value: int) -> None:\n        \"\"\"Set the brightness of all the pixels in the image. (fill)\n\nExample: ``my_image.fill(5)``\n\n:param value: (value) The new brightness as a number between 0 (dark) and 9 (bright).\n\nThis method will raise an exception when called on any of the built-in\nread-only images, like ``Image.HEART``.\"\"\"\n        ...\n\n    def blit(self, src: Image, x: int, y: int, w: int, h: int, xdest: int=0, ydest: int=0) -> None:\n        \"\"\"Copy an area from another image into this image. (blit)\n\nExample: ``my_image.blit(Image.HEART, 1, 1, 3, 3, 1, 1)``\n\n:param src: (src) The source image\n:param x: (x) The starting column offset in the source image\n:param y: (y) The starting row offset in the source image\n:param w: (w) The number of columns to copy\n:param h: (h) The number of rows to copy\n:param xdest: (xdest) The column offset to modify in this image\n:param ydest: (ydest) The row offset to modify in this image\n\nPixels outside the source image are treated as having a brightness of 0.\n\n``shift_left()``, ``shift_right()``, ``shift_up()``, ``shift_down()``\nand ``crop()`` can are all implemented by using ``blit()``.\n\nFor example, img.crop(x, y, w, h) can be implemented as::\n\n    def crop(self, x, y, w, h):\n        res = Image(w, h)\n        res.blit(self, x, y, w, h)\n        return res\"\"\"\n        ...\n\n    def __repr__(self) -> str:\n        \"\"\"Get a compact string representation of the image. (repr)\"\"\"\n        ...\n\n    def __str__(self) -> str:\n        \"\"\"Get a readable string representation of the image. (str)\"\"\"\n        ...\n\n    def __add__(self, other: Image) -> Image:\n        \"\"\"Create a new image by adding the brightness values from the two\nimages for each pixel. (add)\n\nExample: ``Image.HEART + Image.HAPPY``\n\n:param other: (other) The image to add.\"\"\"\n        ...\n\n    def __sub__(self, other: Image) -> Image:\n        \"\"\"Create a new image by subtracting the brightness values of the\nother image from this image. (sub)\n\nExample: ``Image.HEART - Image.HEART_SMALL``\n\n:param other: (other) The image to subtract.\"\"\"\n        ...\n\n    def __mul__(self, n: float) -> Image:\n        \"\"\"Create a new image by multiplying the brightness of each pixel by\n``n``. (mul)\n\nExample: ``Image.HEART * 0.5``\n\n:param n: (n) The value to multiply by.\"\"\"\n        ...\n\n    def __truediv__(self, n: float) -> Image:\n        \"\"\"Create a new image by dividing the brightness of each pixel by\n``n``. (truediv)\n\nExample: ``Image.HEART / 2``\n\n:param n: (n) The value to divide by.\"\"\"\n        ...\n\nclass SoundEvent:\n    LOUD: SoundEvent\n    \"\"\"Represents the transition of sound events, from ``loud`` to ``quiet`` like speaking or background music. (loud)\"\"\"\n    QUIET: SoundEvent\n    \"\"\"Represents the transition of sound events, from ``quiet`` to ``loud`` like clapping or shouting. (quiet)\"\"\"\n\nclass Sound:\n    \"\"\"The built-in sounds can be called using ``audio.play(Sound.NAME)``. (sound)\"\"\"\n    GIGGLE: Sound\n    \"\"\"Giggling sound. (giggle)\"\"\"\n    HAPPY: Sound\n    \"\"\"Happy sound. (happy)\"\"\"\n    HELLO: Sound\n    \"\"\"Greeting sound. (hello)\"\"\"\n    MYSTERIOUS: Sound\n    \"\"\"Mysterious sound. (mysterious)\"\"\"\n    SAD: Sound\n    \"\"\"Sad sound. (sad)\"\"\"\n    SLIDE: Sound\n    \"\"\"Sliding sound. (slide)\"\"\"\n    SOARING: Sound\n    \"\"\"Soaring sound. (soaring)\"\"\"\n    SPRING: Sound\n    \"\"\"Spring sound. (spring)\"\"\"\n    TWINKLE: Sound\n    \"\"\"Twinkling sound. (twinkle)\"\"\"\n    YAWN: Sound\n    \"\"\"Yawning sound. (yawn)\"\"\"",
    "/typeshed/stdlib/microbit/accelerometer.pyi": "\"\"\"Measure the acceleration of the micro:bit and recognise gestures. (accelerometer)\"\"\"\nfrom typing import Tuple\n\ndef get_x() -> int:\n    \"\"\"Get the acceleration measurement in the ``x`` axis in milli-g. (get x)\n\nExample: ``accelerometer.get_x()``\n\n:return: A positive or negative integer depending on direction in the range +/- 2000mg.\"\"\"\n    ...\n\ndef get_y() -> int:\n    \"\"\"Get the acceleration measurement in the ``y`` axis in milli-g. (get y)\n\nExample: ``accelerometer.get_y()``\n\n:return: A positive or negative integer depending on direction in the range +/- 2000mg.\"\"\"\n    ...\n\ndef get_z() -> int:\n    \"\"\"Get the acceleration measurement in the ``z`` axis in milli-g. (get z)\n\nExample: ``accelerometer.get_z()``\n\n:return: A positive or negative integer depending on direction in the range +/- 2000mg.\"\"\"\n    ...\n\ndef get_values() -> Tuple[int, int, int]:\n    \"\"\"Get the acceleration measurements in all axes at once as a tuple. (get values)\n\nExample: ``x, y, z = accelerometer.get_values()``\n\n:return: a three-element tuple of integers ordered as X, Y, Z, each value a positive or negative integer depending on direction in the range +/- 2000mg\"\"\"\n    ...\n\ndef current_gesture() -> str:\n    \"\"\"Get the name of the current gesture. (current gesture)\n\nExample: ``accelerometer.current_gesture()``\n\nMicroPython understands the following gesture names: ``\"up\"``, ``\"down\"``,\n``\"left\"``, ``\"right\"``, ``\"face up\"``, ``\"face down\"``, ``\"freefall\"``,\n``\"3g\"``, ``\"6g\"``, ``\"8g\"``, ``\"shake\"``. Gestures are always\nrepresented as strings.\n\n:return: The current gesture\"\"\"\n    ...\n\ndef is_gesture(name: str) -> bool:\n    \"\"\"Check if the named gesture is currently active. (is gesture)\n\nExample: ``accelerometer.is_gesture('shake')``\n\nMicroPython understands the following gesture names: ``\"up\"``, ``\"down\"``,\n``\"left\"``, ``\"right\"``, ``\"face up\"``, ``\"face down\"``, ``\"freefall\"``,\n``\"3g\"``, ``\"6g\"``, ``\"8g\"``, ``\"shake\"``. Gestures are always\nrepresented as strings.\n\n:param name: (name) The gesture name.\n:return: ``True`` if the gesture is active, ``False`` otherwise.\"\"\"\n    ...\n\ndef was_gesture(name: str) -> bool:\n    \"\"\"Check if the named gesture was active since the last call. (was gesture)\n\nExample: ``accelerometer.was_gesture('shake')``\n\nMicroPython understands the following gesture names: ``\"up\"``, ``\"down\"``,\n``\"left\"``, ``\"right\"``, ``\"face up\"``, ``\"face down\"``, ``\"freefall\"``,\n``\"3g\"``, ``\"6g\"``, ``\"8g\"``, ``\"shake\"``. Gestures are always\nrepresented as strings.\n\n:param name: (name) The gesture name.\n:return: ``True`` if the gesture was active since the last call, ``False`` otherwise.\"\"\"\n\ndef get_gestures() -> Tuple[str, ...]:\n    \"\"\"Return a tuple of the gesture history. (get gestures)\n\nExample: ``accelerometer.get_gestures()``\n\nClears the gesture history before returning.\n\nGestures are not updated in the background so there needs to be constant\ncalls to some accelerometer method to do the gesture detection. Usually\ngestures can be detected using a loop with a small :func:`microbit.sleep` delay.\n\n:return: The history as a tuple, most recent last.\"\"\"\n    ...",
    "/typeshed/stdlib/microbit/audio.pyi": "\"\"\"Play sounds using the micro:bit (import ``audio`` for V1 compatibility). (audio)\"\"\"\nfrom ..microbit import MicroBitDigitalPin, Sound, pin0\nfrom typing import Iterable, Union\n\ndef play(source: Union[Iterable[AudioFrame], Sound], wait: bool=True, pin: MicroBitDigitalPin=pin0, return_pin: Union[MicroBitDigitalPin, None]=None) -> None:\n    \"\"\"Play a built-in sound or custom audio frames.``. (play)\n\nExample: ``audio.play(Sound.GIGGLE)``\n\n:param source: (source) A built-in ``Sound`` such as ``Sound.GIGGLE`` or sample data as an iterable of ``AudioFrame`` objects.\n:param wait: (wait) If ``wait`` is ``True``, this function will block until the sound is complete.\n:param pin: (pin) An optional argument to specify the output pin can be used to  override the default of ``pin0``. If we do not want any sound to play we can use ``pin=None``.\n:param return_pin: (return pin) Specifies a differential edge connector pin to connect to an external speaker instead of ground. This is ignored for the **V2** revision.\"\"\"\n\ndef is_playing() -> bool:\n    \"\"\"Check whether a sound is playing. (is playing)\n\nExample: ``audio.is_playing()``\n\n:return: ``True`` if audio is playing, otherwise ``False``.\"\"\"\n    ...\n\ndef stop() -> None:\n    \"\"\"Stop all audio playback. (stop)\n\nExample: ``audio.stop()``\"\"\"\n    ...\n\nclass AudioFrame:\n    \"\"\"An ``AudioFrame`` object is a list of 32 samples each of which is a unsigned byte\n(whole number between 0 and 255). (audioframe)\n\nIt takes just over 4 ms to play a single frame.\n\nExample::\n\n    frame = AudioFrame()\n    for i in range(len(frame)):\n        frame[i] = 252 - i * 8\"\"\"\n\n    def __len__(self) -> int:\n        ...\n\n    def __setitem__(self, key: int, value: int) -> None:\n        ...\n\n    def __getitem__(self, key: int) -> int:\n        ...",
    "/typeshed/stdlib/microbit/compass.pyi": "\"\"\"Use the built-in compass. (compass)\"\"\"\n\ndef calibrate() -> None:\n    \"\"\"Starts the calibration process. (calibrate)\n\nExample: ``compass.calibrate()``\n\nAn instructive message will be scrolled to the user after which they will need\nto rotate the device in order to draw a circle on the LED display.\"\"\"\n    ...\n\ndef is_calibrated() -> bool:\n    \"\"\"Check is the compass is calibrated. (is calibrated)\n\nExample: ``compass.is_calibrated()``\n\n:return: ``True`` if the compass has been successfully calibrated, ``False`` otherwise.\"\"\"\n    ...\n\ndef clear_calibration() -> None:\n    \"\"\"Undoes the calibration, making the compass uncalibrated again. (clear calibration)\n\nExample: ``compass.clear_calibration()``\"\"\"\n    ...\n\ndef get_x() -> int:\n    \"\"\"Get the magnetic field strength on the ``x`` axis. (get x)\n\nExample: ``compass.get_x()``\n\nCall ``calibrate`` first or the results will be inaccurate.\n\n:return: A positive or negative integer in nano tesla representing the magnitude and direction of the field.\"\"\"\n    ...\n\ndef get_y() -> int:\n    \"\"\"Get the magnetic field strength on the ``y`` axis. (get y)\n\nExample: ``compass.get_y()``\n\nCall ``calibrate`` first or the results will be inaccurate.\n\n:return: A positive or negative integer in nano tesla representing the magnitude and direction of the field.\"\"\"\n    ...\n\ndef get_z() -> int:\n    \"\"\"Get the magnetic field strength on the ``z`` axis. (get z)\n\nExample: ``compass.get_z()``\n\nCall ``calibrate`` first or the results will be inaccurate.\n\n:return: A positive or negative integer in nano tesla representing the magnitude and direction of the field.\"\"\"\n    ...\n\ndef heading() -> int:\n    \"\"\"Get the compass heading. (heading)\n\nExample: ``compass.heading()``\n\n:return: An integer in the range from 0 to 360, representing the angle in degrees, clockwise, with north as 0.\"\"\"\n    ...\n\ndef get_field_strength() -> int:\n    \"\"\"Get the magnitude of the magnetic field around the device. (get field strength)\n\nExample: ``compass.get_field_strength()``\n\n:return: An integer indication of the magnitude of the magnetic field in nano tesla.\"\"\"\n    ...",
    "/typeshed/stdlib/microbit/display.pyi": "\"\"\"Show text, images and animations on the 5\u00d75 LED display. (display)\"\"\"\nfrom ..microbit import Image\nfrom typing import Union, overload, Iterable\n\ndef get_pixel(x: int, y: int) -> int:\n    \"\"\"Get the brightness of the LED at column ``x`` and row ``y``. (get pixel)\n\nExample: ``display.get_pixel(0, 0)``\n\n:param x: (x) The display column (0..4)\n:param y: (y) The display row (0..4)\n:return: A number between 0 (off) and 9 (bright)\"\"\"\n    ...\n\ndef set_pixel(x: int, y: int, value: int) -> None:\n    \"\"\"Set the brightness of the LED at column ``x`` and row ``y``. (set pixel)\n\nExample: ``display.set_pixel(0, 0, 9)``\n\n:param x: (x) The display column (0..4)\n:param y: (y) The display row (0..4)\n:param value: (value) The brightness between 0 (off) and 9 (bright)\"\"\"\n    ...\n\ndef clear() -> None:\n    \"\"\"Set the brightness of all LEDs to 0 (off). (clear)\n\nExample: ``display.clear()``\"\"\"\n    ...\n\ndef show(image: Union[str, float, int, Image, Iterable[Image]], delay: int=400, wait: bool=True, loop: bool=False, clear: bool=False) -> None:\n    \"\"\"Shows images, letters or digits on the display. (show)\n\nExample: ``display.show(Image.HEART)``\n\nWhen ``image`` is an image or a list of images then each image is displayed in turn.\nIf ``image`` is a string or number, each letter or digit is displayed in turn.\n\n:param image: (image) A string, number, image or list of images to show.\n:param delay: (delay) Each letter, digit or image is shown with ``delay`` milliseconds between them.\n:param wait: (wait) If ``wait`` is ``True``, this function will block until the animation is finished, otherwise the animation will happen in the background.\n:param loop: (loop) If ``loop`` is ``True``, the animation will repeat forever.\n:param clear: (clear) If ``clear`` is ``True``, the display will be cleared after the sequence has finished.\n\nThe ``wait``, ``loop`` and ``clear`` arguments must be specified using their keyword.\"\"\"\n    ...\n\ndef scroll(text: Union[str, float, int], delay: int=150, wait: bool=True, loop: bool=False, monospace: bool=False) -> None:\n    \"\"\"Scrolls a number or text on the display. (scroll)\n\nExample: ``display.scroll('micro:bit')``\n\n:param text: (text) The string to scroll. If ``text`` is an integer or float it is first converted to a string using ``str()``.\n:param delay: (delay) The ``delay`` parameter controls how fast the text is scrolling.\n:param wait: (wait) If ``wait`` is ``True``, this function will block until the animation is finished, otherwise the animation will happen in the background.\n:param loop: (loop) If ``loop`` is ``True``, the animation will repeat forever.\n:param monospace: (monospace) If ``monospace`` is ``True``, the characters will all take up 5 pixel-columns in width, otherwise there will be exactly 1 blank pixel-column between each character as they scroll.\n\nThe ``wait``, ``loop`` and ``monospace`` arguments must be specified\nusing their keyword.\"\"\"\n    ...\n\ndef on() -> None:\n    \"\"\"Turn on the display. (on)\n\nExample: ``display.on()``\"\"\"\n    ...\n\ndef off() -> None:\n    \"\"\"Turn off the display (allowing you to re-use the GPIO pins associated with the display for other purposes). (off)\n\nExample: ``display.off()``\"\"\"\n    ...\n\ndef is_on() -> bool:\n    \"\"\"Check whether the display is on. (is on)\n\nExample: ``display.is_on()``\n\n:return: ``True`` if the display is on, otherwise returns ``False``.\"\"\"\n    ...\n\ndef read_light_level() -> int:\n    \"\"\"Read the light level. (read light level)\n\nExample: ``display.read_light_level()``\n\nUses the display's LEDs in reverse-bias mode to sense the amount of light\nfalling on the display.\n\n:return: An integer between 0 and 255 representing the light level, with larger meaning more light.\"\"\"\n    ...",
    "/typeshed/stdlib/microbit/i2c.pyi": "\"\"\"Communicate with devices using the I\u00b2C bus protocol. (i2c)\"\"\"\nfrom _typeshed import ReadableBuffer\nfrom ..microbit import MicroBitDigitalPin, pin19, pin20\nfrom typing import List\n\ndef init(freq: int=100000, sda: MicroBitDigitalPin=pin20, scl: MicroBitDigitalPin=pin19) -> None:\n    \"\"\"Re-initialize a peripheral. (init)\n\nExample: ``i2c.init()``\n\n:param freq: (freq) clock frequency\n:param sda: (sda) ``sda`` pin (default 20)\n:param scl: (scl) ``scl`` pin (default 19)\n\nOn a micro:bit V1 board, changing the I\u00b2C pins from defaults will make\nthe accelerometer and compass stop working, as they are connected\ninternally to those pins. This warning does not apply to the **V2**\nrevision of the micro:bit as this has `separate I\u00b2C lines <https://tech.microbit.org/hardware/i2c/>`_\nfor the motion sensors and the edge connector.\"\"\"\n    ...\n\ndef scan() -> List[int]:\n    \"\"\"Scan the bus for devices. (scan)\n\nExample: ``i2c.scan()``\n\n:return: A list of 7-bit addresses corresponding to those devices that responded to the scan.\"\"\"\n    ...\n\ndef read(addr: int, n: int, repeat: bool=False) -> bytes:\n    \"\"\"Read bytes from a device.. (read)\n\nExample: ``i2c.read(0x50, 64)``\n\n:param addr: (addr) The 7-bit address of the device\n:param n: (n) The number of bytes to read\n:param repeat: (repeat) If ``True``, no stop bit will be sent\n:return: The bytes read\"\"\"\n    ...\n\ndef write(addr: int, buf: ReadableBuffer, repeat: bool=False) -> None:\n    \"\"\"Write bytes to a device. (write)\n\nExample: ``i2c.write(0x50, bytes([1, 2, 3]))``\n\n:param addr: (addr) The 7-bit address of the device\n:param buf: (buf) A buffer containing the bytes to write\n:param repeat: (repeat) If ``True``, no stop bit will be sent\"\"\"\n    ...",
    "/typeshed/stdlib/microbit/microphone.pyi": "\"\"\"Respond to sound using the built-in microphone (V2 only). (microphone)\"\"\"\nfrom typing import Optional, Tuple\nfrom ..microbit import SoundEvent\n\ndef current_event() -> Optional[SoundEvent]:\n    \"\"\"Get the last recorded sound event (current event)\n\nExample: ``microphone.current_event()``\n\n:return: The event, ``SoundEvent('loud')`` or ``SoundEvent('quiet')``.\"\"\"\n    ...\n\ndef was_event(event: SoundEvent) -> bool:\n    \"\"\"Check if a sound was heard at least once since the last call. (was event)\n\nExample: ``microphone.was_event(SoundEvent.LOUD)``\n\nThis call clears the sound history before returning.\n\n:param event: (event) The event to check for,  such as ``SoundEvent.LOUD`` or ``SoundEvent.QUIET``\n:return: ``True`` if sound was heard at least once since the last call, otherwise ``False``.\"\"\"\n    ...\n\ndef is_event(event: SoundEvent) -> bool:\n    \"\"\"Check the most recent sound event detected. (is event)\n\nExample: ``microphone.is_event(SoundEvent.LOUD)``\n\nThis call does not clear the sound event history.\n\n:param event: (event) The event to check for,  such as ``SoundEvent.LOUD`` or ``SoundEvent.QUIET``\n:return: ``True`` if sound was the most recent heard, ``False`` otherwise.\"\"\"\n    ...\n\ndef get_events() -> Tuple[SoundEvent, ...]:\n    \"\"\"Get the sound event history as a tuple. (get events)\n\nExample: ``microphone.get_events()``\n\nThis call clears the sound history before returning.\n\n:return: A tuple of the event history with the most recent event last.\"\"\"\n    ...\n\ndef set_threshold(event: SoundEvent, value: int) -> None:\n    \"\"\"Set the threshold for a sound event. (set threshold)\n\nExample: ``microphone.set_threshold(SoundEvent.LOUD, 250)``\n\nA high threshold means the event will only trigger if the sound is very loud (>= 250 in the example).\n\n:param event: (event) A sound event, such as ``SoundEvent.LOUD`` or ``SoundEvent.QUIET``.\n:param value: (value) The threshold level in the range 0-255.\"\"\"\n    ...\n\ndef sound_level() -> int:\n    \"\"\"Get the sound pressure level. (sound level)\n\nExample: ``microphone.sound_level()``\n\n:return: A representation of the sound pressure level in the range 0 to 255.\"\"\"\n    ...",
    "/typeshed/stdlib/microbit/speaker.pyi": "\"\"\"Control the built-in speaker (V2 only). (speaker)\"\"\"\n\ndef off() -> None:\n    \"\"\"Turn the speaker off. (off)\n\nExample: ``speaker.off()``\n\nThis does not disable sound output to an edge connector pin.\"\"\"\n    ...\n\ndef on() -> None:\n    \"\"\"Turn the speaker on. (on)\n\nExample: ``speaker.on()``\"\"\"\n    ...",
    "/typeshed/stdlib/microbit/spi.pyi": "\"\"\"Communicate with devices using the serial peripheral interface (SPI) bus. (spi)\"\"\"\nfrom _typeshed import ReadableBuffer, WriteableBuffer\nfrom ..microbit import pin13, pin14, pin15, MicroBitDigitalPin\n\ndef init(baudrate: int=1000000, bits: int=8, mode: int=0, sclk: MicroBitDigitalPin=pin13, mosi: MicroBitDigitalPin=pin15, miso: MicroBitDigitalPin=pin14) -> None:\n    \"\"\"Initialize SPI communication. (init)\n\nExample: ``spi.init()``\n\nFor correct communication, the parameters have to be the same on both communicating devices.\n\n:param baudrate: (baudrate) The speed of communication.\n:param bits: (bits) The size of bytes being transmitted. Currently only ``bits=8`` is supported. However, this may change in the future.\n:param mode: (mode) Determines the combination of clock polarity and phase - `see online table <https://microbit-micropython.readthedocs.io/en/v2-docs/spi.html#microbit.spi.init>`_.\n:param sclk: (sclk) sclk pin (default 13)\n:param mosi: (mosi) mosi pin (default 15)\n:param miso: (miso) miso pin (default 14)\"\"\"\n    ...\n\ndef read(nbytes: int) -> bytes:\n    \"\"\"Read bytes. (read)\n\nExample: ``spi.read(64)``\n\n:param nbytes: (nbytes) Maximum number of bytes to read.\n:return: The bytes read.\"\"\"\n    ...\n\ndef write(buffer: ReadableBuffer) -> None:\n    \"\"\"Write bytes to the bus. (write)\n\nExample: ``spi.write(bytes([1, 2, 3]))``\n\n:param buffer: (buffer) A buffer to read data from.\"\"\"\n    ...\n\ndef write_readinto(out: WriteableBuffer, in_: ReadableBuffer) -> None:\n    \"\"\"Write the ``out`` buffer to the bus and read any response into the ``in_`` buffer. (write readinto)\n\nExample: ``spi.write_readinto(out_buffer, in_buffer)``\n\nThe length of the buffers should be the same. The buffers can be the same object.\n\n:param out: (out) The buffer to write any response to.\n:param in_: (in) The buffer to read data from.\"\"\"\n    ...",
    "/typeshed/stdlib/microbit/uart.pyi": "\"\"\"Communicate with a device using a serial interface. (uart)\"\"\"\nfrom _typeshed import WriteableBuffer\nfrom ..microbit import MicroBitDigitalPin\nfrom typing import Optional, Union\nODD: int\n\"\"\"Odd partity (odd)\"\"\"\nEVEN: int\n\"\"\"Even parity (even)\"\"\"\n\ndef init(baudrate: int=9600, bits: int=8, parity: Optional[int]=None, stop: int=1, tx: Optional[MicroBitDigitalPin]=None, rx: Optional[MicroBitDigitalPin]=None) -> None:\n    \"\"\"Initialize serial communication. (init)\n\nExample: ``uart.init(115200, tx=pin0, rx=pin1)``\n\n:param baudrate: (baudrate) The speed of communication.\n:param bits: (bits) The size of bytes being transmitted. micro:bit only supports 8.\n:param parity: (parity) How parity is checked, ``None``, ``uart.ODD`` or ``uart.EVEN``.\n:param stop: (stop) The number of stop bits, has to be 1 for micro:bit.\n:param tx: (tx) Transmitting pin.\n:param rx: (rx) Receiving pin.\n\nInitializing the UART on external pins will cause the Python console on\nUSB to become unaccessible, as it uses the same hardware. To bring the\nconsole back you must reinitialize the UART without passing anything for\n``tx`` or ``rx`` (or passing ``None`` to these arguments).  This means\nthat calling ``uart.init(115200)`` is enough to restore the Python console.\n\nFor more details see `the online documentation <https://microbit-micropython.readthedocs.io/en/v2-docs/uart.html>`_.\"\"\"\n    ...\n\ndef any() -> bool:\n    \"\"\"Check is any data is waiting. (any)\n\nExample: ``uart.any()``\n\n:return: ``True`` if any data is waiting, else ``False``.\"\"\"\n    ...\n\ndef read(nbytes: Optional[int]=None) -> Optional[bytes]:\n    \"\"\"Read bytes. (read)\n\nExample: ``uart.read()``\n\n:param nbytes: (nbytes) If ``nbytes`` is specified then read at most that many bytes, otherwise read as many bytes as possible\n:return: A bytes object or ``None`` on timeout\"\"\"\n    ...\n\ndef readinto(buf: WriteableBuffer, nbytes: Optional[int]=None) -> Optional[int]:\n    \"\"\"Read bytes into the ``buf``. (readinto)\n\nExample: ``uart.readinto(input_buffer)``\n\n:param buf: (buf) The buffer to write to.\n:param nbytes: (nbytes) If ``nbytes`` is specified then read at most that many bytes, otherwise read ``len(buf)`` bytes.\n:return: number of bytes read and stored into ``buf`` or ``None`` on timeout.\"\"\"\n    ...\n\ndef readline() -> Optional[bytes]:\n    \"\"\"Read a line, ending in a newline character. (readline)\n\nExample: ``uart.readline()``\n\n:return: The line read or ``None`` on timeout. The newline character is included in the returned bytes.\"\"\"\n    ...\n\ndef write(buf: Union[bytes, str]) -> Optional[int]:\n    \"\"\"Write a buffer to the bus. (write)\n\nExample: ``uart.write('hello world')``\n\n:param buf: (buf) A bytes object or a string.\n:return: The number of bytes written, or ``None`` on timeout.\n\nExamples::\n\n    uart.write('hello world')\n    uart.write(b'hello world')\n    uart.write(bytes([1, 2, 3]))\"\"\"\n    ...",
    "/typeshed/stdlib/collections/__init__.pyi": "import sys\nfrom typing import Any, Dict, Generic, ItemsView, Iterable, Iterator, KeysView, Optional, Reversible, Tuple, Type, TypeVar, Union, ValuesView\n_S = TypeVar('_S')\n_T = TypeVar('_T')\n_KT = TypeVar('_KT')\n_VT = TypeVar('_VT')\nif sys.version_info >= (3, 7):\n\n    def namedtuple(typename: str, field_names: Union[str, Iterable[str]], *, rename: bool=..., module: Optional[str]=..., defaults: Optional[Iterable[Any]]=...) -> Type[Tuple[Any, ...]]:\n        ...\nelse:\n\n    def namedtuple(typename: str, field_names: Union[str, Iterable[str]], *, verbose: bool=..., rename: bool=..., module: Optional[str]=...) -> Type[Tuple[Any, ...]]:\n        ...\n\nclass _OrderedDictKeysView(KeysView[_KT], Reversible[_KT]):\n\n    def __reversed__(self) -> Iterator[_KT]:\n        ...\n\nclass _OrderedDictItemsView(ItemsView[_KT, _VT], Reversible[Tuple[_KT, _VT]]):\n\n    def __reversed__(self) -> Iterator[Tuple[_KT, _VT]]:\n        ...\n\nclass _OrderedDictValuesView(ValuesView[_VT], Reversible[_VT]):\n\n    def __reversed__(self) -> Iterator[_VT]:\n        ...\n\nclass OrderedDict(Dict[_KT, _VT], Reversible[_KT], Generic[_KT, _VT]):\n\n    def popitem(self, last: bool=...) -> Tuple[_KT, _VT]:\n        ...\n\n    def move_to_end(self, key: _KT, last: bool=...) -> None:\n        ...\n\n    def copy(self: _S) -> _S:\n        ...\n\n    def __reversed__(self) -> Iterator[_KT]:\n        ...\n\n    def keys(self) -> _OrderedDictKeysView[_KT]:\n        ...\n\n    def items(self) -> _OrderedDictItemsView[_KT, _VT]:\n        ...\n\n    def values(self) -> _OrderedDictValuesView[_VT]:\n        ...",
    "/src/pyrightconfig.json": "{ \n  \"pythonVersion\": \"3.6\",\n  \"pythonPlatform\": \"Linux\",\n  \"typeCheckingMode\": \"basic\",\n  \"typeshedPath\": \"/typeshed/\",\n  \"reportMissingModuleSource\": false,\n  \"reportWildcardImportFromLibrary\": false,\n  \"verboseOutput\": true\n }\n"
  }
}
